//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceSerializationGenerator for AccountIdentification4Choice.  ISO2002 ID# _Pdwzodp-Ed-ak6NoX_4Aeg_-1833658219.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.AccountIdentification4Choice;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Choices
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="AccountIdentification4Choice_"/>.
    /// </summary>
    public class AccountIdentification4ChoiceXmlAsyncWriter : ISubordinateXmlAsyncWriter<AccountIdentification4Choice_>
    {
        private readonly AccountIdentification4ChoiceIBANXmlAsyncWriter iBAN;
        private readonly AccountIdentification4ChoiceOtherXmlAsyncWriter other;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public AccountIdentification4ChoiceXmlAsyncWriter
        (
            AccountIdentification4ChoiceIBANXmlAsyncWriter iBAN,
            AccountIdentification4ChoiceOtherXmlAsyncWriter other
        )
        {
            this.iBAN = iBAN;
            this.other = other;
        }
        public Task WriteAsync(XmlWriter writer, AccountIdentification4Choice_ valueBeingSerialized, string isoNamespace)
        {
            return valueBeingSerialized switch
            {
                BeneficialStrategies.Iso20022.Choices.AccountIdentification4Choice.IBAN _iBAN => this.iBAN.WriteAsync( writer, _iBAN, isoNamespace ),
                BeneficialStrategies.Iso20022.Choices.AccountIdentification4Choice.Other _other => this.other.WriteAsync( writer, _other, isoNamespace ),
                _ => throw new InvalidCastException( $"Data type of {valueBeingSerialized.GetType().FullName} has no corresponding serializer.")
            };
        }
    }
}
