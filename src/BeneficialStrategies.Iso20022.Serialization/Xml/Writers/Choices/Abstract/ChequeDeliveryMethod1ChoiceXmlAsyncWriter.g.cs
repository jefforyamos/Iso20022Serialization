//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceSerializationGenerator for ChequeDeliveryMethod1Choice.  ISO2002 ID# _QbwF5tp-Ed-ak6NoX_4Aeg_258234806.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Choices.ChequeDeliveryMethod1Choice;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.ChequeDeliveryMethod1Choice;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Choices
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="ChequeDeliveryMethod1Choice_"/>.
    /// </summary>
    public class ChequeDeliveryMethod1ChoiceXmlAsyncWriter : ISubordinateXmlAsyncWriter<ChequeDeliveryMethod1Choice_>
    {
        private readonly ChequeDeliveryMethod1ChoiceCodeXmlAsyncWriter code;
        private readonly ChequeDeliveryMethod1ChoiceProprietaryXmlAsyncWriter proprietary;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public ChequeDeliveryMethod1ChoiceXmlAsyncWriter
        (
            ChequeDeliveryMethod1ChoiceCodeXmlAsyncWriter code,
            ChequeDeliveryMethod1ChoiceProprietaryXmlAsyncWriter proprietary
        )
        {
            this.code = code;
            this.proprietary = proprietary;
        }
        public Task WriteAsync(XmlWriter writer, ChequeDeliveryMethod1Choice_ valueBeingSerialized, string isoNamespace)
        {
            return valueBeingSerialized switch
            {
                Code _code => this.code.WriteAsync( writer, _code, isoNamespace ),
                Proprietary _proprietary => this.proprietary.WriteAsync( writer, _proprietary, isoNamespace ),
                _ => throw new InvalidCastException( $"Data type of {valueBeingSerialized.GetType().FullName} has no corresponding serializer.")
            };
        }
    }
}
