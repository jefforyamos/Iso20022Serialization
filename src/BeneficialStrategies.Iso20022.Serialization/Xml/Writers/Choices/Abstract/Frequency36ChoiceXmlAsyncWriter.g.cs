//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceSerializationGenerator for Frequency36Choice.  ISO2002 ID# _sVM2vWk2Eeanu6HLe77Rkg.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.Frequency36Choice;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Choices
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="Frequency36Choice_"/>.
    /// </summary>
    public class Frequency36ChoiceXmlAsyncWriter : ISubordinateXmlAsyncWriter<Frequency36Choice_>
    {
        private readonly Frequency36ChoiceTypeXmlAsyncWriter type;
        private readonly Frequency36ChoicePeriodXmlAsyncWriter period;
        private readonly Frequency36ChoicePointInTimeXmlAsyncWriter pointInTime;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public Frequency36ChoiceXmlAsyncWriter
        (
            Frequency36ChoiceTypeXmlAsyncWriter type,
            Frequency36ChoicePeriodXmlAsyncWriter period,
            Frequency36ChoicePointInTimeXmlAsyncWriter pointInTime
        )
        {
            this.type = type;
            this.period = period;
            this.pointInTime = pointInTime;
        }
        public Task WriteAsync(XmlWriter writer, Frequency36Choice_ valueBeingSerialized, string isoNamespace)
        {
            return valueBeingSerialized switch
            {
                BeneficialStrategies.Iso20022.Choices.Frequency36Choice.Type _type => this.type.WriteAsync( writer, _type, isoNamespace ),
                BeneficialStrategies.Iso20022.Choices.Frequency36Choice.Period _period => this.period.WriteAsync( writer, _period, isoNamespace ),
                BeneficialStrategies.Iso20022.Choices.Frequency36Choice.PointInTime _pointInTime => this.pointInTime.WriteAsync( writer, _pointInTime, isoNamespace ),
                _ => throw new InvalidCastException( $"Data type of {valueBeingSerialized.GetType().FullName} has no corresponding serializer.")
            };
        }
    }
}
