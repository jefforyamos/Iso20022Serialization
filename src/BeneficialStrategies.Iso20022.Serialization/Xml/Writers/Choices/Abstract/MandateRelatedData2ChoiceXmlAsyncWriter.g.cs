//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceSerializationGenerator for MandateRelatedData2Choice.  ISO2002 ID# _a24zwdcZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.MandateRelatedData2Choice;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Choices
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="MandateRelatedData2Choice_"/>.
    /// </summary>
    public class MandateRelatedData2ChoiceXmlAsyncWriter : ISubordinateXmlAsyncWriter<MandateRelatedData2Choice_>
    {
        private readonly MandateRelatedData2ChoiceDirectDebitMandateXmlAsyncWriter directDebitMandate;
        private readonly MandateRelatedData2ChoiceCreditTransferMandateXmlAsyncWriter creditTransferMandate;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public MandateRelatedData2ChoiceXmlAsyncWriter
        (
            MandateRelatedData2ChoiceDirectDebitMandateXmlAsyncWriter directDebitMandate,
            MandateRelatedData2ChoiceCreditTransferMandateXmlAsyncWriter creditTransferMandate
        )
        {
            this.directDebitMandate = directDebitMandate;
            this.creditTransferMandate = creditTransferMandate;
        }
        public Task WriteAsync(XmlWriter writer, MandateRelatedData2Choice_ valueBeingSerialized, string isoNamespace)
        {
            return valueBeingSerialized switch
            {
                BeneficialStrategies.Iso20022.Choices.MandateRelatedData2Choice.DirectDebitMandate _directDebitMandate => this.directDebitMandate.WriteAsync( writer, _directDebitMandate, isoNamespace ),
                BeneficialStrategies.Iso20022.Choices.MandateRelatedData2Choice.CreditTransferMandate _creditTransferMandate => this.creditTransferMandate.WriteAsync( writer, _creditTransferMandate, isoNamespace ),
                _ => throw new InvalidCastException( $"Data type of {valueBeingSerialized.GetType().FullName} has no corresponding serializer.")
            };
        }
    }
}
