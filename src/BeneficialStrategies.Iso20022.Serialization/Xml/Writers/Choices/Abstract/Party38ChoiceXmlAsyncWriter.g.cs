//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceSerializationGenerator for Party38Choice.  ISO2002 ID# _6L-JzW48EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Choices.Party38Choice;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.Party38Choice;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Choices
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="Party38Choice_"/>.
    /// </summary>
    public class Party38ChoiceXmlAsyncWriter : ISubordinateXmlAsyncWriter<Party38Choice_>
    {
        private readonly Party38ChoiceOrganisationIdentificationXmlAsyncWriter organisationIdentification;
        private readonly Party38ChoicePrivateIdentificationXmlAsyncWriter privateIdentification;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public Party38ChoiceXmlAsyncWriter
        (
            Party38ChoiceOrganisationIdentificationXmlAsyncWriter organisationIdentification,
            Party38ChoicePrivateIdentificationXmlAsyncWriter privateIdentification
        )
        {
            this.organisationIdentification = organisationIdentification;
            this.privateIdentification = privateIdentification;
        }
        public Task WriteAsync(XmlWriter writer, Party38Choice_ valueBeingSerialized, string isoNamespace)
        {
            return valueBeingSerialized switch
            {
                OrganisationIdentification _organisationIdentification => this.organisationIdentification.WriteAsync( writer, _organisationIdentification, isoNamespace ),
                PrivateIdentification _privateIdentification => this.privateIdentification.WriteAsync( writer, _privateIdentification, isoNamespace ),
                _ => throw new InvalidCastException( $"Data type of {valueBeingSerialized.GetType().FullName} has no corresponding serializer.")
            };
        }
    }
}
