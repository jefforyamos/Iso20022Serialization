//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceSerializationGenerator for Party40Choice.  ISO2002 ID# _8KfE5248EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Choices.Party40Choice;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.Party40Choice;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Choices
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="Party40Choice_"/>.
    /// </summary>
    public class Party40ChoiceXmlAsyncWriter : ISubordinateXmlAsyncWriter<Party40Choice_>
    {
        private readonly Party40ChoicePartyXmlAsyncWriter party;
        private readonly Party40ChoiceAgentXmlAsyncWriter agent;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public Party40ChoiceXmlAsyncWriter
        (
            Party40ChoicePartyXmlAsyncWriter party,
            Party40ChoiceAgentXmlAsyncWriter agent
        )
        {
            this.party = party;
            this.agent = agent;
        }
        public Task WriteAsync(XmlWriter writer, Party40Choice_ valueBeingSerialized, string isoNamespace)
        {
            return valueBeingSerialized switch
            {
                Party _party => this.party.WriteAsync( writer, _party, isoNamespace ),
                Agent _agent => this.agent.WriteAsync( writer, _agent, isoNamespace ),
                _ => throw new InvalidCastException( $"Data type of {valueBeingSerialized.GetType().FullName} has no corresponding serializer.")
            };
        }
    }
}
