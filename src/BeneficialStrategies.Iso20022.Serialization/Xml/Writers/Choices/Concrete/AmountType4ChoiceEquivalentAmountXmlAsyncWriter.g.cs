//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceSerializationGenerator for EquivalentAmount.  ISO2002 ID# __k-HBVkJEeSeLKjZh_lWZw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Choices.AmountType4Choice;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

using EquivalentAmount = BeneficialStrategies.Iso20022.Choices.AmountType4Choice.EquivalentAmount;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.AmountType4Choice
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="EquivalentAmount"/>.
    /// </summary>
    public class AmountType4ChoiceEquivalentAmountXmlAsyncWriter : ISubordinateXmlAsyncWriter<EquivalentAmount>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ActiveOrHistoricCurrencyAndAmountXmlAsyncWriter amount;
        private readonly ActiveOrHistoricCurrencyCodeXmlAsyncWriter currencyOfTransfer;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public AmountType4ChoiceEquivalentAmountXmlAsyncWriter
        (
            ActiveOrHistoricCurrencyAndAmountXmlAsyncWriter amount,
            ActiveOrHistoricCurrencyCodeXmlAsyncWriter currencyOfTransfer
        )
        {
            this.amount = amount;
            this.currencyOfTransfer = currencyOfTransfer;
        }
        public async Task WriteAsync(XmlWriter writer, EquivalentAmount valueBeingSerialized, string isoNamespace)
        {
            // Amount Required ActiveOrHistoricCurrencyAndAmount System.Decimal
            await writer.WriteStartElementAsync(null, "Amt", isoNamespace );
            await amount.WriteAsync(writer, valueBeingSerialized.Amount, isoNamespace);
            await writer.WriteEndElementAsync();
            // CurrencyOfTransfer Required ActiveOrHistoricCurrencyCode string
            await writer.WriteStartElementAsync(null, "CcyOfTrf", isoNamespace );
            await currencyOfTransfer.WriteAsync(writer, valueBeingSerialized.CurrencyOfTransfer, isoNamespace);
            await writer.WriteEndElementAsync();
        }
    }
}
