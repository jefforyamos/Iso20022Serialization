//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceSerializationGenerator for PrivateIdentification.  ISO2002 ID# _6VWvRW48EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Choices.Party38Choice;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.Party38Choice
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="PrivateIdentification"/>.
    /// </summary>
    public class Party38ChoicePrivateIdentificationXmlAsyncWriter : ISubordinateXmlAsyncWriter<PrivateIdentification>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ISubordinateXmlAsyncWriter<DateAndPlaceOfBirth1> dateAndPlaceOfBirth;
        private readonly ISubordinateXmlAsyncWriter<GenericPersonIdentification1> other;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public Party38ChoicePrivateIdentificationXmlAsyncWriter
        (
            ISubordinateXmlAsyncWriter<DateAndPlaceOfBirth1> dateAndPlaceOfBirth,
            ISubordinateXmlAsyncWriter<GenericPersonIdentification1> other
        )
        {
            this.dateAndPlaceOfBirth = dateAndPlaceOfBirth;
            this.other = other;
        }
        public async Task WriteAsync(XmlWriter writer, PrivateIdentification valueBeingSerialized, string isoNamespace)
        {
            // DateAndPlaceOfBirth Optional DateAndPlaceOfBirth1 DateAndPlaceOfBirth1
            if ( valueBeingSerialized.DateAndPlaceOfBirth is DateAndPlaceOfBirth1 populatedDateAndPlaceOfBirth)
            {
                await writer.WriteStartElementAsync(null, "DtAndPlcOfBirth", isoNamespace );
                await dateAndPlaceOfBirth.WriteAsync(writer, populatedDateAndPlaceOfBirth, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Other Optional GenericPersonIdentification1 GenericPersonIdentification1
            if ( valueBeingSerialized.Other is GenericPersonIdentification1 populatedOther)
            {
                await writer.WriteStartElementAsync(null, "Othr", isoNamespace );
                await other.WriteAsync(writer, populatedOther, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
