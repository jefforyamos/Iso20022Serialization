//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceSerializationGenerator for Agent.  ISO2002 ID# _8U6MNW48EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Choices.Party40Choice;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

using Agent = BeneficialStrategies.Iso20022.Choices.Party40Choice.Agent;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Choices.Party40Choice
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="Agent"/>.
    /// </summary>
    public class Party40ChoiceAgentXmlAsyncWriter : ISubordinateXmlAsyncWriter<Agent>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ISubordinateXmlAsyncWriter<FinancialInstitutionIdentification18> financialInstitutionIdentification;
        private readonly ISubordinateXmlAsyncWriter<BranchData3> branchIdentification;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public Party40ChoiceAgentXmlAsyncWriter
        (
            ISubordinateXmlAsyncWriter<FinancialInstitutionIdentification18> financialInstitutionIdentification,
            ISubordinateXmlAsyncWriter<BranchData3> branchIdentification
        )
        {
            this.financialInstitutionIdentification = financialInstitutionIdentification;
            this.branchIdentification = branchIdentification;
        }
        public async Task WriteAsync(XmlWriter writer, Agent valueBeingSerialized, string isoNamespace)
        {
            // FinancialInstitutionIdentification Required FinancialInstitutionIdentification18 FinancialInstitutionIdentification18
            await writer.WriteStartElementAsync(null, "FinInstnId", isoNamespace );
            await financialInstitutionIdentification.WriteAsync(writer, valueBeingSerialized.FinancialInstitutionIdentification, isoNamespace);
            await writer.WriteEndElementAsync();
            // BranchIdentification Optional BranchData3 BranchData3
            if ( valueBeingSerialized.BranchIdentification is BranchData3 populatedBranchIdentification)
            {
                await writer.WriteStartElementAsync(null, "BrnchId", isoNamespace );
                await branchIdentification.WriteAsync(writer, populatedBranchIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
