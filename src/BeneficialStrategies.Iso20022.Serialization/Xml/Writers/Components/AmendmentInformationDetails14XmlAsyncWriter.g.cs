//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for AmendmentInformationDetails14.  ISO2002 ID# _a5rpG9cZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="AmendmentInformationDetails14"/>.
    /// </summary>
    public class AmendmentInformationDetails14XmlAsyncWriter
    ( // primary constructor 
        IMax35TextXmlAsyncWriter originalMandateIdentification,
        ISubordinateXmlAsyncWriter<PartyIdentification135> originalCreditorSchemeIdentification,
        ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> originalCreditorAgent,
        ISubordinateXmlAsyncWriter<CashAccount40> originalCreditorAgentAccount,
        ISubordinateXmlAsyncWriter<PartyIdentification135> originalDebtor,
        ISubordinateXmlAsyncWriter<CashAccount40> originalDebtorAccount,
        ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> originalDebtorAgent,
        ISubordinateXmlAsyncWriter<CashAccount40> originalDebtorAgentAccount,
        IISODateXmlAsyncWriter originalFinalCollectionDate,
        ISubordinateXmlAsyncWriter<Frequency36Choice_> originalFrequency,
        ISubordinateXmlAsyncWriter<MandateSetupReason1Choice_> originalReason,
        IExact2NumericTextXmlAsyncWriter originalTrackingDays
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<AmendmentInformationDetails14>
    {
        public async Task WriteAsync(XmlWriter writer, AmendmentInformationDetails14 value, string isoNamespace)
        {
            // OriginalMandateIdentification Optional Max35Text System.String
            if ( value.OriginalMandateIdentification is System.String populatedOriginalMandateIdentification)
            {
                await writer.WriteStartElementAsync(null, "OrgnlMndtId", isoNamespace );
                await originalMandateIdentification.WriteAsync(writer, populatedOriginalMandateIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalCreditorSchemeIdentification Optional PartyIdentification135 PartyIdentification135
            if ( value.OriginalCreditorSchemeIdentification is PartyIdentification135 populatedOriginalCreditorSchemeIdentification)
            {
                await writer.WriteStartElementAsync(null, "OrgnlCdtrSchmeId", isoNamespace );
                await originalCreditorSchemeIdentification.WriteAsync(writer, populatedOriginalCreditorSchemeIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalCreditorAgent Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( value.OriginalCreditorAgent is BranchAndFinancialInstitutionIdentification6 populatedOriginalCreditorAgent)
            {
                await writer.WriteStartElementAsync(null, "OrgnlCdtrAgt", isoNamespace );
                await originalCreditorAgent.WriteAsync(writer, populatedOriginalCreditorAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalCreditorAgentAccount Optional CashAccount40 CashAccount40
            if ( value.OriginalCreditorAgentAccount is CashAccount40 populatedOriginalCreditorAgentAccount)
            {
                await writer.WriteStartElementAsync(null, "OrgnlCdtrAgtAcct", isoNamespace );
                await originalCreditorAgentAccount.WriteAsync(writer, populatedOriginalCreditorAgentAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalDebtor Optional PartyIdentification135 PartyIdentification135
            if ( value.OriginalDebtor is PartyIdentification135 populatedOriginalDebtor)
            {
                await writer.WriteStartElementAsync(null, "OrgnlDbtr", isoNamespace );
                await originalDebtor.WriteAsync(writer, populatedOriginalDebtor, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalDebtorAccount Optional CashAccount40 CashAccount40
            if ( value.OriginalDebtorAccount is CashAccount40 populatedOriginalDebtorAccount)
            {
                await writer.WriteStartElementAsync(null, "OrgnlDbtrAcct", isoNamespace );
                await originalDebtorAccount.WriteAsync(writer, populatedOriginalDebtorAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalDebtorAgent Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( value.OriginalDebtorAgent is BranchAndFinancialInstitutionIdentification6 populatedOriginalDebtorAgent)
            {
                await writer.WriteStartElementAsync(null, "OrgnlDbtrAgt", isoNamespace );
                await originalDebtorAgent.WriteAsync(writer, populatedOriginalDebtorAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalDebtorAgentAccount Optional CashAccount40 CashAccount40
            if ( value.OriginalDebtorAgentAccount is CashAccount40 populatedOriginalDebtorAgentAccount)
            {
                await writer.WriteStartElementAsync(null, "OrgnlDbtrAgtAcct", isoNamespace );
                await originalDebtorAgentAccount.WriteAsync(writer, populatedOriginalDebtorAgentAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalFinalCollectionDate Optional ISODate System.DateOnly
            if ( value.OriginalFinalCollectionDate is System.DateOnly populatedOriginalFinalCollectionDate)
            {
                await writer.WriteStartElementAsync(null, "OrgnlFnlColltnDt", isoNamespace );
                await originalFinalCollectionDate.WriteAsync(writer, populatedOriginalFinalCollectionDate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalFrequency Optional Frequency36Choice Frequency36Choice_
            if ( value.OriginalFrequency is Frequency36Choice_ populatedOriginalFrequency)
            {
                await writer.WriteStartElementAsync(null, "OrgnlFrqcy", isoNamespace );
                await originalFrequency.WriteAsync(writer, populatedOriginalFrequency, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalReason Optional MandateSetupReason1Choice MandateSetupReason1Choice_
            if ( value.OriginalReason is MandateSetupReason1Choice_ populatedOriginalReason)
            {
                await writer.WriteStartElementAsync(null, "OrgnlRsn", isoNamespace );
                await originalReason.WriteAsync(writer, populatedOriginalReason, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalTrackingDays Optional Exact2NumericText System.String
            if ( value.OriginalTrackingDays is System.String populatedOriginalTrackingDays)
            {
                await writer.WriteStartElementAsync(null, "OrgnlTrckgDays", isoNamespace );
                await originalTrackingDays.WriteAsync(writer, populatedOriginalTrackingDays, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
