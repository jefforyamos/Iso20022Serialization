//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for BranchAndFinancialInstitutionIdentification6.  ISO2002 ID# _8nO10W49EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="BranchAndFinancialInstitutionIdentification6"/>.
    /// </summary>
    public class BranchAndFinancialInstitutionIdentification6XmlAsyncWriter
    ( // primary constructor 
        ISubordinateXmlAsyncWriter<FinancialInstitutionIdentification18> financialInstitutionIdentification,
        ISubordinateXmlAsyncWriter<BranchData3> branchIdentification
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6>
    {
        public async Task WriteAsync(XmlWriter writer, BranchAndFinancialInstitutionIdentification6 value, string isoNamespace)
        {
            // FinancialInstitutionIdentification Required FinancialInstitutionIdentification18 FinancialInstitutionIdentification18
            await writer.WriteStartElementAsync(null, "FinInstnId", isoNamespace );
            await financialInstitutionIdentification.WriteAsync(writer, value.FinancialInstitutionIdentification, isoNamespace);
            await writer.WriteEndElementAsync();
            // BranchIdentification Optional BranchData3 BranchData3
            if ( value.BranchIdentification is BranchData3 populatedBranchIdentification)
            {
                await writer.WriteStartElementAsync(null, "BrnchId", isoNamespace );
                await branchIdentification.WriteAsync(writer, populatedBranchIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
