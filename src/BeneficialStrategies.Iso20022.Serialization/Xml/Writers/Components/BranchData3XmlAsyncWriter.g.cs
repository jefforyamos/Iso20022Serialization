//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for BranchData3.  ISO2002 ID# _-2V8QW4-EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="BranchData3"/>.
    /// </summary>
    public class BranchData3XmlAsyncWriter : ISubordinateXmlAsyncWriter<BranchData3>
    {
        // Injected dependencies for serialization of each member data type
        private readonly Max35TextXmlAsyncWriter identification;
        private readonly LEIIdentifierXmlAsyncWriter lEI;
        private readonly Max140TextXmlAsyncWriter name;
        private readonly ISubordinateXmlAsyncWriter<PostalAddress24> postalAddress;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public BranchData3XmlAsyncWriter
        (
            Max35TextXmlAsyncWriter identification,
            LEIIdentifierXmlAsyncWriter lEI,
            Max140TextXmlAsyncWriter name,
            ISubordinateXmlAsyncWriter<PostalAddress24> postalAddress
        )
        {
            this.identification = identification;
            this.lEI = lEI;
            this.name = name;
            this.postalAddress = postalAddress;
        }
        public async Task WriteAsync(XmlWriter writer, BranchData3 valueBeingSerialized, string isoNamespace)
        {
            // Identification Optional Max35Text System.String
            if ( valueBeingSerialized.Identification is System.String populatedIdentification)
            {
                await writer.WriteStartElementAsync(null, "Id", isoNamespace );
                await identification.WriteAsync(writer, populatedIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // LEI Optional LEIIdentifier System.String
            if ( valueBeingSerialized.LEI is System.String populatedLEI)
            {
                await writer.WriteStartElementAsync(null, "LEI", isoNamespace );
                await lEI.WriteAsync(writer, populatedLEI, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Name Optional Max140Text System.String
            if ( valueBeingSerialized.Name is System.String populatedName)
            {
                await writer.WriteStartElementAsync(null, "Nm", isoNamespace );
                await name.WriteAsync(writer, populatedName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PostalAddress Optional PostalAddress24 PostalAddress24
            if ( valueBeingSerialized.PostalAddress is PostalAddress24 populatedPostalAddress)
            {
                await writer.WriteStartElementAsync(null, "PstlAdr", isoNamespace );
                await postalAddress.WriteAsync(writer, populatedPostalAddress, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
