//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for CashAccount40.  ISO2002 ID# _avXPcdcZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="CashAccount40"/>.
    /// </summary>
    public class CashAccount40XmlAsyncWriter
    ( // primary constructor 
        ISubordinateXmlAsyncWriter<AccountIdentification4Choice_> identification,
        ISubordinateXmlAsyncWriter<CashAccountType2Choice_> type,
        IActiveOrHistoricCurrencyCodeXmlAsyncWriter currency,
        IMax70TextXmlAsyncWriter name,
        ISubordinateXmlAsyncWriter<ProxyAccountIdentification1> proxy
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<CashAccount40>
    {
        public async Task WriteAsync(XmlWriter writer, CashAccount40 value, string isoNamespace)
        {
            // Identification Optional AccountIdentification4Choice AccountIdentification4Choice_
            if ( value.Identification is AccountIdentification4Choice_ populatedIdentification)
            {
                await writer.WriteStartElementAsync(null, "Id", isoNamespace );
                await identification.WriteAsync(writer, populatedIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Type Optional CashAccountType2Choice CashAccountType2Choice_
            if ( value.Type is CashAccountType2Choice_ populatedType)
            {
                await writer.WriteStartElementAsync(null, "Tp", isoNamespace );
                await type.WriteAsync(writer, populatedType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Currency Optional ActiveOrHistoricCurrencyCode string
            if ( value.Currency is string populatedCurrency)
            {
                await writer.WriteStartElementAsync(null, "Ccy", isoNamespace );
                await currency.WriteAsync(writer, populatedCurrency, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Name Optional Max70Text System.String
            if ( value.Name is System.String populatedName)
            {
                await writer.WriteStartElementAsync(null, "Nm", isoNamespace );
                await name.WriteAsync(writer, populatedName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Proxy Optional ProxyAccountIdentification1 ProxyAccountIdentification1
            if ( value.Proxy is ProxyAccountIdentification1 populatedProxy)
            {
                await writer.WriteStartElementAsync(null, "Prxy", isoNamespace );
                await proxy.WriteAsync(writer, populatedProxy, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
