//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for Cheque11.  ISO2002 ID# _-VaZd24-EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Amounts;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="Cheque11"/>.
    /// </summary>
    public class Cheque11XmlAsyncWriter : ISubordinateXmlAsyncWriter<Cheque11>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ChequeType2CodeXmlAsyncWriter chequeType;
        private readonly Max35TextXmlAsyncWriter chequeNumber;
        private readonly ISubordinateXmlAsyncWriter<NameAndAddress16> chequeFrom;
        private readonly ISubordinateXmlAsyncWriter<ChequeDeliveryMethod1Choice_> deliveryMethod;
        private readonly ISubordinateXmlAsyncWriter<NameAndAddress16> deliverTo;
        private readonly Priority2CodeXmlAsyncWriter instructionPriority;
        private readonly ISODateXmlAsyncWriter chequeMaturityDate;
        private readonly Max35TextXmlAsyncWriter formsCode;
        private readonly Max35TextXmlAsyncWriter memoField;
        private readonly Max35TextXmlAsyncWriter regionalClearingZone;
        private readonly Max35TextXmlAsyncWriter printLocation;
        private readonly Max70TextXmlAsyncWriter signature;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public Cheque11XmlAsyncWriter
        (
            ChequeType2CodeXmlAsyncWriter chequeType,
            Max35TextXmlAsyncWriter chequeNumber,
            ISubordinateXmlAsyncWriter<NameAndAddress16> chequeFrom,
            ISubordinateXmlAsyncWriter<ChequeDeliveryMethod1Choice_> deliveryMethod,
            ISubordinateXmlAsyncWriter<NameAndAddress16> deliverTo,
            Priority2CodeXmlAsyncWriter instructionPriority,
            ISODateXmlAsyncWriter chequeMaturityDate,
            Max35TextXmlAsyncWriter formsCode,
            Max35TextXmlAsyncWriter memoField,
            Max35TextXmlAsyncWriter regionalClearingZone,
            Max35TextXmlAsyncWriter printLocation,
            Max70TextXmlAsyncWriter signature
        )
        {
            this.chequeType = chequeType;
            this.chequeNumber = chequeNumber;
            this.chequeFrom = chequeFrom;
            this.deliveryMethod = deliveryMethod;
            this.deliverTo = deliverTo;
            this.instructionPriority = instructionPriority;
            this.chequeMaturityDate = chequeMaturityDate;
            this.formsCode = formsCode;
            this.memoField = memoField;
            this.regionalClearingZone = regionalClearingZone;
            this.printLocation = printLocation;
            this.signature = signature;
        }
        public async Task WriteAsync(XmlWriter writer, Cheque11 valueBeingSerialized, string isoNamespace)
        {
            // ChequeType Optional ChequeType2Code ChequeType2Code
            if ( valueBeingSerialized.ChequeType is ChequeType2Code populatedChequeType)
            {
                await writer.WriteStartElementAsync(null, "ChqTp", isoNamespace );
                await chequeType.WriteAsync(writer, populatedChequeType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChequeNumber Optional Max35Text System.String
            if ( valueBeingSerialized.ChequeNumber is System.String populatedChequeNumber)
            {
                await writer.WriteStartElementAsync(null, "ChqNb", isoNamespace );
                await chequeNumber.WriteAsync(writer, populatedChequeNumber, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChequeFrom Optional NameAndAddress16 NameAndAddress16
            if ( valueBeingSerialized.ChequeFrom is NameAndAddress16 populatedChequeFrom)
            {
                await writer.WriteStartElementAsync(null, "ChqFr", isoNamespace );
                await chequeFrom.WriteAsync(writer, populatedChequeFrom, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DeliveryMethod Optional ChequeDeliveryMethod1Choice ChequeDeliveryMethod1Choice_
            if ( valueBeingSerialized.DeliveryMethod is ChequeDeliveryMethod1Choice_ populatedDeliveryMethod)
            {
                await writer.WriteStartElementAsync(null, "DlvryMtd", isoNamespace );
                await deliveryMethod.WriteAsync(writer, populatedDeliveryMethod, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DeliverTo Optional NameAndAddress16 NameAndAddress16
            if ( valueBeingSerialized.DeliverTo is NameAndAddress16 populatedDeliverTo)
            {
                await writer.WriteStartElementAsync(null, "DlvrTo", isoNamespace );
                await deliverTo.WriteAsync(writer, populatedDeliverTo, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructionPriority Optional Priority2Code Priority2Code
            if ( valueBeingSerialized.InstructionPriority is Priority2Code populatedInstructionPriority)
            {
                await writer.WriteStartElementAsync(null, "InstrPrty", isoNamespace );
                await instructionPriority.WriteAsync(writer, populatedInstructionPriority, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChequeMaturityDate Optional ISODate System.DateOnly
            if ( valueBeingSerialized.ChequeMaturityDate is System.DateOnly populatedChequeMaturityDate)
            {
                await writer.WriteStartElementAsync(null, "ChqMtrtyDt", isoNamespace );
                await chequeMaturityDate.WriteAsync(writer, populatedChequeMaturityDate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // FormsCode Optional Max35Text System.String
            if ( valueBeingSerialized.FormsCode is System.String populatedFormsCode)
            {
                await writer.WriteStartElementAsync(null, "FrmsCd", isoNamespace );
                await formsCode.WriteAsync(writer, populatedFormsCode, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // MemoField Collection Max35Text System.String
            foreach ( var item in valueBeingSerialized.MemoField)
            {
                await writer.WriteStartElementAsync(null, "MemoFld", isoNamespace );
                await memoField.WriteAsync(writer, item , isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RegionalClearingZone Optional Max35Text System.String
            if ( valueBeingSerialized.RegionalClearingZone is System.String populatedRegionalClearingZone)
            {
                await writer.WriteStartElementAsync(null, "RgnlClrZone", isoNamespace );
                await regionalClearingZone.WriteAsync(writer, populatedRegionalClearingZone, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PrintLocation Optional Max35Text System.String
            if ( valueBeingSerialized.PrintLocation is System.String populatedPrintLocation)
            {
                await writer.WriteStartElementAsync(null, "PrtLctn", isoNamespace );
                await printLocation.WriteAsync(writer, populatedPrintLocation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Signature Collection Max70Text System.String
            foreach ( var item in valueBeingSerialized.Signature)
            {
                await writer.WriteStartElementAsync(null, "Sgntr", isoNamespace );
                await signature.WriteAsync(writer, item , isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
