//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for Contact4.  ISO2002 ID# _q1hc0W4_EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="Contact4"/>.
    /// </summary>
    public class Contact4XmlAsyncWriter : ISubordinateXmlAsyncWriter<Contact4>
    {
        // Injected dependencies for serialization of each member data type
        private readonly NamePrefix2CodeXmlAsyncWriter namePrefix;
        private readonly Max140TextXmlAsyncWriter name;
        private readonly PhoneNumberXmlAsyncWriter phoneNumber;
        private readonly PhoneNumberXmlAsyncWriter mobileNumber;
        private readonly PhoneNumberXmlAsyncWriter faxNumber;
        private readonly Max2048TextXmlAsyncWriter emailAddress;
        private readonly Max35TextXmlAsyncWriter emailPurpose;
        private readonly Max35TextXmlAsyncWriter jobTitle;
        private readonly Max35TextXmlAsyncWriter responsibility;
        private readonly Max70TextXmlAsyncWriter department;
        private readonly ISubordinateXmlAsyncWriter<OtherContact1> other;
        private readonly PreferredContactMethod1CodeXmlAsyncWriter preferredMethod;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public Contact4XmlAsyncWriter
        (
            NamePrefix2CodeXmlAsyncWriter namePrefix,
            Max140TextXmlAsyncWriter name,
            PhoneNumberXmlAsyncWriter phoneNumber,
            PhoneNumberXmlAsyncWriter mobileNumber,
            PhoneNumberXmlAsyncWriter faxNumber,
            Max2048TextXmlAsyncWriter emailAddress,
            Max35TextXmlAsyncWriter emailPurpose,
            Max35TextXmlAsyncWriter jobTitle,
            Max35TextXmlAsyncWriter responsibility,
            Max70TextXmlAsyncWriter department,
            ISubordinateXmlAsyncWriter<OtherContact1> other,
            PreferredContactMethod1CodeXmlAsyncWriter preferredMethod
        )
        {
            this.namePrefix = namePrefix;
            this.name = name;
            this.phoneNumber = phoneNumber;
            this.mobileNumber = mobileNumber;
            this.faxNumber = faxNumber;
            this.emailAddress = emailAddress;
            this.emailPurpose = emailPurpose;
            this.jobTitle = jobTitle;
            this.responsibility = responsibility;
            this.department = department;
            this.other = other;
            this.preferredMethod = preferredMethod;
        }
        public async Task WriteAsync(XmlWriter writer, Contact4 valueBeingSerialized, string isoNamespace)
        {
            // NamePrefix Optional NamePrefix2Code NamePrefix2Code
            if ( valueBeingSerialized.NamePrefix is NamePrefix2Code populatedNamePrefix)
            {
                await writer.WriteStartElementAsync(null, "NmPrfx", isoNamespace );
                await namePrefix.WriteAsync(writer, populatedNamePrefix, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Name Optional Max140Text System.String
            if ( valueBeingSerialized.Name is System.String populatedName)
            {
                await writer.WriteStartElementAsync(null, "Nm", isoNamespace );
                await name.WriteAsync(writer, populatedName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PhoneNumber Optional PhoneNumber System.String
            if ( valueBeingSerialized.PhoneNumber is System.String populatedPhoneNumber)
            {
                await writer.WriteStartElementAsync(null, "PhneNb", isoNamespace );
                await phoneNumber.WriteAsync(writer, populatedPhoneNumber, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // MobileNumber Optional PhoneNumber System.String
            if ( valueBeingSerialized.MobileNumber is System.String populatedMobileNumber)
            {
                await writer.WriteStartElementAsync(null, "MobNb", isoNamespace );
                await mobileNumber.WriteAsync(writer, populatedMobileNumber, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // FaxNumber Optional PhoneNumber System.String
            if ( valueBeingSerialized.FaxNumber is System.String populatedFaxNumber)
            {
                await writer.WriteStartElementAsync(null, "FaxNb", isoNamespace );
                await faxNumber.WriteAsync(writer, populatedFaxNumber, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // EmailAddress Optional Max2048Text System.String
            if ( valueBeingSerialized.EmailAddress is System.String populatedEmailAddress)
            {
                await writer.WriteStartElementAsync(null, "EmailAdr", isoNamespace );
                await emailAddress.WriteAsync(writer, populatedEmailAddress, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // EmailPurpose Optional Max35Text System.String
            if ( valueBeingSerialized.EmailPurpose is System.String populatedEmailPurpose)
            {
                await writer.WriteStartElementAsync(null, "EmailPurp", isoNamespace );
                await emailPurpose.WriteAsync(writer, populatedEmailPurpose, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // JobTitle Optional Max35Text System.String
            if ( valueBeingSerialized.JobTitle is System.String populatedJobTitle)
            {
                await writer.WriteStartElementAsync(null, "JobTitl", isoNamespace );
                await jobTitle.WriteAsync(writer, populatedJobTitle, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Responsibility Optional Max35Text System.String
            if ( valueBeingSerialized.Responsibility is System.String populatedResponsibility)
            {
                await writer.WriteStartElementAsync(null, "Rspnsblty", isoNamespace );
                await responsibility.WriteAsync(writer, populatedResponsibility, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Department Optional Max70Text System.String
            if ( valueBeingSerialized.Department is System.String populatedDepartment)
            {
                await writer.WriteStartElementAsync(null, "Dept", isoNamespace );
                await department.WriteAsync(writer, populatedDepartment, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Other Optional OtherContact1 OtherContact1
            if ( valueBeingSerialized.Other is OtherContact1 populatedOther)
            {
                await writer.WriteStartElementAsync(null, "Othr", isoNamespace );
                await other.WriteAsync(writer, populatedOther, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PreferredMethod Optional PreferredContactMethod1Code PreferredContactMethod1Code
            if ( valueBeingSerialized.PreferredMethod is PreferredContactMethod1Code populatedPreferredMethod)
            {
                await writer.WriteStartElementAsync(null, "PrefrdMtd", isoNamespace );
                await preferredMethod.WriteAsync(writer, populatedPreferredMethod, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
