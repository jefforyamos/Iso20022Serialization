//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for CreditTransferMandateData1.  ISO2002 ID# _EVj2MclqEem0vqvvoqYsqQ.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="CreditTransferMandateData1"/>.
    /// </summary>
    public class CreditTransferMandateData1XmlAsyncWriter : ISubordinateXmlAsyncWriter<CreditTransferMandateData1>
    {
        // Injected dependencies for serialization of each member data type
        private readonly IMax35TextXmlAsyncWriter mandateIdentification;
        private readonly ISubordinateXmlAsyncWriter<MandateTypeInformation2> type;
        private readonly IISODateXmlAsyncWriter dateOfSignature;
        private readonly IISODateTimeXmlAsyncWriter dateOfVerification;
        private readonly IMax10KBinaryXmlAsyncWriter electronicSignature;
        private readonly IISODateXmlAsyncWriter firstPaymentDate;
        private readonly IISODateXmlAsyncWriter finalPaymentDate;
        private readonly ISubordinateXmlAsyncWriter<Frequency36Choice_> frequency;
        private readonly ISubordinateXmlAsyncWriter<MandateSetupReason1Choice_> reason;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public CreditTransferMandateData1XmlAsyncWriter
        (
            IMax35TextXmlAsyncWriter mandateIdentification,
            ISubordinateXmlAsyncWriter<MandateTypeInformation2> type,
            IISODateXmlAsyncWriter dateOfSignature,
            IISODateTimeXmlAsyncWriter dateOfVerification,
            IMax10KBinaryXmlAsyncWriter electronicSignature,
            IISODateXmlAsyncWriter firstPaymentDate,
            IISODateXmlAsyncWriter finalPaymentDate,
            ISubordinateXmlAsyncWriter<Frequency36Choice_> frequency,
            ISubordinateXmlAsyncWriter<MandateSetupReason1Choice_> reason
        )
        {
            this.mandateIdentification = mandateIdentification;
            this.type = type;
            this.dateOfSignature = dateOfSignature;
            this.dateOfVerification = dateOfVerification;
            this.electronicSignature = electronicSignature;
            this.firstPaymentDate = firstPaymentDate;
            this.finalPaymentDate = finalPaymentDate;
            this.frequency = frequency;
            this.reason = reason;
        }
        public async Task WriteAsync(XmlWriter writer, CreditTransferMandateData1 value, string isoNamespace)
        {
            // MandateIdentification Optional Max35Text System.String
            if ( value.MandateIdentification is System.String populatedMandateIdentification)
            {
                await writer.WriteStartElementAsync(null, "MndtId", isoNamespace );
                await mandateIdentification.WriteAsync(writer, populatedMandateIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Type Optional MandateTypeInformation2 MandateTypeInformation2
            if ( value.Type is MandateTypeInformation2 populatedType)
            {
                await writer.WriteStartElementAsync(null, "Tp", isoNamespace );
                await type.WriteAsync(writer, populatedType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DateOfSignature Optional ISODate System.DateOnly
            if ( value.DateOfSignature is System.DateOnly populatedDateOfSignature)
            {
                await writer.WriteStartElementAsync(null, "DtOfSgntr", isoNamespace );
                await dateOfSignature.WriteAsync(writer, populatedDateOfSignature, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DateOfVerification Optional ISODateTime System.DateTime
            if ( value.DateOfVerification is System.DateTime populatedDateOfVerification)
            {
                await writer.WriteStartElementAsync(null, "DtOfVrfctn", isoNamespace );
                await dateOfVerification.WriteAsync(writer, populatedDateOfVerification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ElectronicSignature Optional Max10KBinary System.Byte[]
            if ( value.ElectronicSignature is System.Byte[] populatedElectronicSignature)
            {
                await writer.WriteStartElementAsync(null, "ElctrncSgntr", isoNamespace );
                await electronicSignature.WriteAsync(writer, populatedElectronicSignature, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // FirstPaymentDate Optional ISODate System.DateOnly
            if ( value.FirstPaymentDate is System.DateOnly populatedFirstPaymentDate)
            {
                await writer.WriteStartElementAsync(null, "FrstPmtDt", isoNamespace );
                await firstPaymentDate.WriteAsync(writer, populatedFirstPaymentDate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // FinalPaymentDate Optional ISODate System.DateOnly
            if ( value.FinalPaymentDate is System.DateOnly populatedFinalPaymentDate)
            {
                await writer.WriteStartElementAsync(null, "FnlPmtDt", isoNamespace );
                await finalPaymentDate.WriteAsync(writer, populatedFinalPaymentDate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Frequency Optional Frequency36Choice Frequency36Choice_
            if ( value.Frequency is Frequency36Choice_ populatedFrequency)
            {
                await writer.WriteStartElementAsync(null, "Frqcy", isoNamespace );
                await frequency.WriteAsync(writer, populatedFrequency, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Reason Optional MandateSetupReason1Choice MandateSetupReason1Choice_
            if ( value.Reason is MandateSetupReason1Choice_ populatedReason)
            {
                await writer.WriteStartElementAsync(null, "Rsn", isoNamespace );
                await reason.WriteAsync(writer, populatedReason, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
