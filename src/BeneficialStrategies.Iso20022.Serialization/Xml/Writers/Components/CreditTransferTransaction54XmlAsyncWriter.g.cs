//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for CreditTransferTransaction54.  ISO2002 ID# _e15nSdcZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="CreditTransferTransaction54"/>.
    /// </summary>
    public class CreditTransferTransaction54XmlAsyncWriter : ISubordinateXmlAsyncWriter<CreditTransferTransaction54>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ISubordinateXmlAsyncWriter<PaymentIdentification6> paymentIdentification;
        private readonly ISubordinateXmlAsyncWriter<PaymentTypeInformation26> paymentTypeInformation;
        private readonly ISubordinateXmlAsyncWriter<AmountType4Choice_> amount;
        private readonly ISubordinateXmlAsyncWriter<ExchangeRate1> exchangeRateInformation;
        private readonly IEnumXmlAsyncWriter<ChargeBearerType1Code> chargeBearer;
        private readonly ISubordinateXmlAsyncWriter<CreditTransferMandateData1> mandateRelatedInformation;
        private readonly ISubordinateXmlAsyncWriter<Cheque11> chequeInstruction;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateDebtor;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> intermediaryAgent1;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> intermediaryAgent1Account;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> intermediaryAgent2;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> intermediaryAgent2Account;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> intermediaryAgent3;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> intermediaryAgent3Account;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> creditorAgent;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> creditorAgentAccount;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> creditor;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> creditorAccount;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateCreditor;
        private readonly ISubordinateXmlAsyncWriter<InstructionForCreditorAgent3> instructionForCreditorAgent;
        private readonly ISubordinateXmlAsyncWriter<InstructionForDebtorAgent1> instructionForDebtorAgent;
        private readonly ISubordinateXmlAsyncWriter<Purpose2Choice_> purpose;
        private readonly ISubordinateXmlAsyncWriter<RegulatoryReporting3> regulatoryReporting;
        private readonly ISubordinateXmlAsyncWriter<TaxInformation10> tax;
        private readonly ISubordinateXmlAsyncWriter<RemittanceLocation7> relatedRemittanceInformation;
        private readonly ISubordinateXmlAsyncWriter<RemittanceInformation21> remittanceInformation;
        private readonly ISubordinateXmlAsyncWriter<SupplementaryData1> supplementaryData;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public CreditTransferTransaction54XmlAsyncWriter
        (
            ISubordinateXmlAsyncWriter<PaymentIdentification6> paymentIdentification,
            ISubordinateXmlAsyncWriter<PaymentTypeInformation26> paymentTypeInformation,
            ISubordinateXmlAsyncWriter<AmountType4Choice_> amount,
            ISubordinateXmlAsyncWriter<ExchangeRate1> exchangeRateInformation,
            IEnumXmlAsyncWriter<ChargeBearerType1Code> chargeBearer,
            ISubordinateXmlAsyncWriter<CreditTransferMandateData1> mandateRelatedInformation,
            ISubordinateXmlAsyncWriter<Cheque11> chequeInstruction,
            ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateDebtor,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> intermediaryAgent1,
            ISubordinateXmlAsyncWriter<CashAccount40> intermediaryAgent1Account,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> intermediaryAgent2,
            ISubordinateXmlAsyncWriter<CashAccount40> intermediaryAgent2Account,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> intermediaryAgent3,
            ISubordinateXmlAsyncWriter<CashAccount40> intermediaryAgent3Account,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> creditorAgent,
            ISubordinateXmlAsyncWriter<CashAccount40> creditorAgentAccount,
            ISubordinateXmlAsyncWriter<PartyIdentification135> creditor,
            ISubordinateXmlAsyncWriter<CashAccount40> creditorAccount,
            ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateCreditor,
            ISubordinateXmlAsyncWriter<InstructionForCreditorAgent3> instructionForCreditorAgent,
            ISubordinateXmlAsyncWriter<InstructionForDebtorAgent1> instructionForDebtorAgent,
            ISubordinateXmlAsyncWriter<Purpose2Choice_> purpose,
            ISubordinateXmlAsyncWriter<RegulatoryReporting3> regulatoryReporting,
            ISubordinateXmlAsyncWriter<TaxInformation10> tax,
            ISubordinateXmlAsyncWriter<RemittanceLocation7> relatedRemittanceInformation,
            ISubordinateXmlAsyncWriter<RemittanceInformation21> remittanceInformation,
            ISubordinateXmlAsyncWriter<SupplementaryData1> supplementaryData
        )
        {
            this.paymentIdentification = paymentIdentification;
            this.paymentTypeInformation = paymentTypeInformation;
            this.amount = amount;
            this.exchangeRateInformation = exchangeRateInformation;
            this.chargeBearer = chargeBearer;
            this.mandateRelatedInformation = mandateRelatedInformation;
            this.chequeInstruction = chequeInstruction;
            this.ultimateDebtor = ultimateDebtor;
            this.intermediaryAgent1 = intermediaryAgent1;
            this.intermediaryAgent1Account = intermediaryAgent1Account;
            this.intermediaryAgent2 = intermediaryAgent2;
            this.intermediaryAgent2Account = intermediaryAgent2Account;
            this.intermediaryAgent3 = intermediaryAgent3;
            this.intermediaryAgent3Account = intermediaryAgent3Account;
            this.creditorAgent = creditorAgent;
            this.creditorAgentAccount = creditorAgentAccount;
            this.creditor = creditor;
            this.creditorAccount = creditorAccount;
            this.ultimateCreditor = ultimateCreditor;
            this.instructionForCreditorAgent = instructionForCreditorAgent;
            this.instructionForDebtorAgent = instructionForDebtorAgent;
            this.purpose = purpose;
            this.regulatoryReporting = regulatoryReporting;
            this.tax = tax;
            this.relatedRemittanceInformation = relatedRemittanceInformation;
            this.remittanceInformation = remittanceInformation;
            this.supplementaryData = supplementaryData;
        }
        public async Task WriteAsync(XmlWriter writer, CreditTransferTransaction54 valueBeingSerialized, string isoNamespace)
        {
            // PaymentIdentification Required PaymentIdentification6 PaymentIdentification6
            await writer.WriteStartElementAsync(null, "PmtId", isoNamespace );
            await paymentIdentification.WriteAsync(writer, valueBeingSerialized.PaymentIdentification, isoNamespace);
            await writer.WriteEndElementAsync();
            // PaymentTypeInformation Optional PaymentTypeInformation26 PaymentTypeInformation26
            if ( valueBeingSerialized.PaymentTypeInformation is PaymentTypeInformation26 populatedPaymentTypeInformation)
            {
                await writer.WriteStartElementAsync(null, "PmtTpInf", isoNamespace );
                await paymentTypeInformation.WriteAsync(writer, populatedPaymentTypeInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Amount Required AmountType4Choice AmountType4Choice_
            await writer.WriteStartElementAsync(null, "Amt", isoNamespace );
            await amount.WriteAsync(writer, valueBeingSerialized.Amount, isoNamespace);
            await writer.WriteEndElementAsync();
            // ExchangeRateInformation Optional ExchangeRate1 ExchangeRate1
            if ( valueBeingSerialized.ExchangeRateInformation is ExchangeRate1 populatedExchangeRateInformation)
            {
                await writer.WriteStartElementAsync(null, "XchgRateInf", isoNamespace );
                await exchangeRateInformation.WriteAsync(writer, populatedExchangeRateInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChargeBearer Optional ChargeBearerType1Code ChargeBearerType1Code
            if ( valueBeingSerialized.ChargeBearer is ChargeBearerType1Code populatedChargeBearer)
            {
                await writer.WriteStartElementAsync(null, "ChrgBr", isoNamespace );
                await chargeBearer.WriteAsync(writer, populatedChargeBearer, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // MandateRelatedInformation Optional CreditTransferMandateData1 CreditTransferMandateData1
            if ( valueBeingSerialized.MandateRelatedInformation is CreditTransferMandateData1 populatedMandateRelatedInformation)
            {
                await writer.WriteStartElementAsync(null, "MndtRltdInf", isoNamespace );
                await mandateRelatedInformation.WriteAsync(writer, populatedMandateRelatedInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChequeInstruction Optional Cheque11 Cheque11
            if ( valueBeingSerialized.ChequeInstruction is Cheque11 populatedChequeInstruction)
            {
                await writer.WriteStartElementAsync(null, "ChqInstr", isoNamespace );
                await chequeInstruction.WriteAsync(writer, populatedChequeInstruction, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // UltimateDebtor Optional PartyIdentification135 PartyIdentification135
            if ( valueBeingSerialized.UltimateDebtor is PartyIdentification135 populatedUltimateDebtor)
            {
                await writer.WriteStartElementAsync(null, "UltmtDbtr", isoNamespace );
                await ultimateDebtor.WriteAsync(writer, populatedUltimateDebtor, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // IntermediaryAgent1 Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( valueBeingSerialized.IntermediaryAgent1 is BranchAndFinancialInstitutionIdentification6 populatedIntermediaryAgent1)
            {
                await writer.WriteStartElementAsync(null, "IntrmyAgt1", isoNamespace );
                await intermediaryAgent1.WriteAsync(writer, populatedIntermediaryAgent1, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // IntermediaryAgent1Account Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.IntermediaryAgent1Account is CashAccount40 populatedIntermediaryAgent1Account)
            {
                await writer.WriteStartElementAsync(null, "IntrmyAgt1Acct", isoNamespace );
                await intermediaryAgent1Account.WriteAsync(writer, populatedIntermediaryAgent1Account, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // IntermediaryAgent2 Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( valueBeingSerialized.IntermediaryAgent2 is BranchAndFinancialInstitutionIdentification6 populatedIntermediaryAgent2)
            {
                await writer.WriteStartElementAsync(null, "IntrmyAgt2", isoNamespace );
                await intermediaryAgent2.WriteAsync(writer, populatedIntermediaryAgent2, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // IntermediaryAgent2Account Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.IntermediaryAgent2Account is CashAccount40 populatedIntermediaryAgent2Account)
            {
                await writer.WriteStartElementAsync(null, "IntrmyAgt2Acct", isoNamespace );
                await intermediaryAgent2Account.WriteAsync(writer, populatedIntermediaryAgent2Account, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // IntermediaryAgent3 Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( valueBeingSerialized.IntermediaryAgent3 is BranchAndFinancialInstitutionIdentification6 populatedIntermediaryAgent3)
            {
                await writer.WriteStartElementAsync(null, "IntrmyAgt3", isoNamespace );
                await intermediaryAgent3.WriteAsync(writer, populatedIntermediaryAgent3, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // IntermediaryAgent3Account Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.IntermediaryAgent3Account is CashAccount40 populatedIntermediaryAgent3Account)
            {
                await writer.WriteStartElementAsync(null, "IntrmyAgt3Acct", isoNamespace );
                await intermediaryAgent3Account.WriteAsync(writer, populatedIntermediaryAgent3Account, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CreditorAgent Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( valueBeingSerialized.CreditorAgent is BranchAndFinancialInstitutionIdentification6 populatedCreditorAgent)
            {
                await writer.WriteStartElementAsync(null, "CdtrAgt", isoNamespace );
                await creditorAgent.WriteAsync(writer, populatedCreditorAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CreditorAgentAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.CreditorAgentAccount is CashAccount40 populatedCreditorAgentAccount)
            {
                await writer.WriteStartElementAsync(null, "CdtrAgtAcct", isoNamespace );
                await creditorAgentAccount.WriteAsync(writer, populatedCreditorAgentAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Creditor Optional PartyIdentification135 PartyIdentification135
            if ( valueBeingSerialized.Creditor is PartyIdentification135 populatedCreditor)
            {
                await writer.WriteStartElementAsync(null, "Cdtr", isoNamespace );
                await creditor.WriteAsync(writer, populatedCreditor, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CreditorAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.CreditorAccount is CashAccount40 populatedCreditorAccount)
            {
                await writer.WriteStartElementAsync(null, "CdtrAcct", isoNamespace );
                await creditorAccount.WriteAsync(writer, populatedCreditorAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // UltimateCreditor Optional PartyIdentification135 PartyIdentification135
            if ( valueBeingSerialized.UltimateCreditor is PartyIdentification135 populatedUltimateCreditor)
            {
                await writer.WriteStartElementAsync(null, "UltmtCdtr", isoNamespace );
                await ultimateCreditor.WriteAsync(writer, populatedUltimateCreditor, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructionForCreditorAgent Optional InstructionForCreditorAgent3 InstructionForCreditorAgent3
            if ( valueBeingSerialized.InstructionForCreditorAgent is InstructionForCreditorAgent3 populatedInstructionForCreditorAgent)
            {
                await writer.WriteStartElementAsync(null, "InstrForCdtrAgt", isoNamespace );
                await instructionForCreditorAgent.WriteAsync(writer, populatedInstructionForCreditorAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructionForDebtorAgent Optional InstructionForDebtorAgent1 InstructionForDebtorAgent1
            if ( valueBeingSerialized.InstructionForDebtorAgent is InstructionForDebtorAgent1 populatedInstructionForDebtorAgent)
            {
                await writer.WriteStartElementAsync(null, "InstrForDbtrAgt", isoNamespace );
                await instructionForDebtorAgent.WriteAsync(writer, populatedInstructionForDebtorAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Purpose Optional Purpose2Choice Purpose2Choice_
            if ( valueBeingSerialized.Purpose is Purpose2Choice_ populatedPurpose)
            {
                await writer.WriteStartElementAsync(null, "Purp", isoNamespace );
                await purpose.WriteAsync(writer, populatedPurpose, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RegulatoryReporting Collection RegulatoryReporting3 RegulatoryReporting3
            foreach ( var item in valueBeingSerialized.RegulatoryReporting)
            {
                await writer.WriteStartElementAsync(null, "RgltryRptg", isoNamespace );
                await regulatoryReporting.WriteAsync(writer, item , isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Tax Optional TaxInformation10 TaxInformation10
            if ( valueBeingSerialized.Tax is TaxInformation10 populatedTax)
            {
                await writer.WriteStartElementAsync(null, "Tax", isoNamespace );
                await tax.WriteAsync(writer, populatedTax, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RelatedRemittanceInformation Collection RemittanceLocation7 RemittanceLocation7
            foreach ( var item in valueBeingSerialized.RelatedRemittanceInformation)
            {
                await writer.WriteStartElementAsync(null, "RltdRmtInf", isoNamespace );
                await relatedRemittanceInformation.WriteAsync(writer, item , isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RemittanceInformation Optional RemittanceInformation21 RemittanceInformation21
            if ( valueBeingSerialized.RemittanceInformation is RemittanceInformation21 populatedRemittanceInformation)
            {
                await writer.WriteStartElementAsync(null, "RmtInf", isoNamespace );
                await remittanceInformation.WriteAsync(writer, populatedRemittanceInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // SupplementaryData Optional SupplementaryData1 SupplementaryData1
            if ( valueBeingSerialized.SupplementaryData is SupplementaryData1 populatedSupplementaryData)
            {
                await writer.WriteStartElementAsync(null, "SplmtryData", isoNamespace );
                await supplementaryData.WriteAsync(writer, populatedSupplementaryData, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
