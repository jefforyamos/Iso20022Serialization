//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for DateAndPlaceOfBirth1.  ISO2002 ID# _jU8IEa9UEeeJJK1oRb-jTw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="DateAndPlaceOfBirth1"/>.
    /// </summary>
    public class DateAndPlaceOfBirth1XmlAsyncWriter
    ( // primary constructor 
        IISODateXmlAsyncWriter birthDate,
        IMax35TextXmlAsyncWriter provinceOfBirth,
        IMax35TextXmlAsyncWriter cityOfBirth,
        ICountryCodeXmlAsyncWriter countryOfBirth
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<DateAndPlaceOfBirth1>
    {
        public async Task WriteAsync(XmlWriter writer, DateAndPlaceOfBirth1 value, string isoNamespace)
        {
            // BirthDate Required ISODate System.DateOnly
            await writer.WriteStartElementAsync(null, "BirthDt", isoNamespace );
            await birthDate.WriteAsync(writer, value.BirthDate, isoNamespace);
            await writer.WriteEndElementAsync();
            // ProvinceOfBirth Optional Max35Text System.String
            if ( value.ProvinceOfBirth is System.String populatedProvinceOfBirth)
            {
                await writer.WriteStartElementAsync(null, "PrvcOfBirth", isoNamespace );
                await provinceOfBirth.WriteAsync(writer, populatedProvinceOfBirth, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CityOfBirth Required Max35Text System.String
            await writer.WriteStartElementAsync(null, "CityOfBirth", isoNamespace );
            await cityOfBirth.WriteAsync(writer, value.CityOfBirth, isoNamespace);
            await writer.WriteEndElementAsync();
            // CountryOfBirth Required CountryCode string
            await writer.WriteStartElementAsync(null, "CtryOfBirth", isoNamespace );
            await countryOfBirth.WriteAsync(writer, value.CountryOfBirth, isoNamespace);
            await writer.WriteEndElementAsync();
        }
    }
}
