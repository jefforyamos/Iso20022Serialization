//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for DirectDebitTransaction11.  ISO2002 ID# _eFalQdcZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="DirectDebitTransaction11"/>.
    /// </summary>
    public class DirectDebitTransaction11XmlAsyncWriter : ISubordinateXmlAsyncWriter<DirectDebitTransaction11>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ISubordinateXmlAsyncWriter<MandateRelatedInformation15> mandateRelatedInformation;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> creditorSchemeIdentification;
        private readonly IMax35TextXmlAsyncWriter preNotificationIdentification;
        private readonly IISODateXmlAsyncWriter preNotificationDate;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public DirectDebitTransaction11XmlAsyncWriter
        (
            ISubordinateXmlAsyncWriter<MandateRelatedInformation15> mandateRelatedInformation,
            ISubordinateXmlAsyncWriter<PartyIdentification135> creditorSchemeIdentification,
            IMax35TextXmlAsyncWriter preNotificationIdentification,
            IISODateXmlAsyncWriter preNotificationDate
        )
        {
            this.mandateRelatedInformation = mandateRelatedInformation;
            this.creditorSchemeIdentification = creditorSchemeIdentification;
            this.preNotificationIdentification = preNotificationIdentification;
            this.preNotificationDate = preNotificationDate;
        }
        public async Task WriteAsync(XmlWriter writer, DirectDebitTransaction11 valueBeingSerialized, string isoNamespace)
        {
            // MandateRelatedInformation Optional MandateRelatedInformation15 MandateRelatedInformation15
            if ( valueBeingSerialized.MandateRelatedInformation is MandateRelatedInformation15 populatedMandateRelatedInformation)
            {
                await writer.WriteStartElementAsync(null, "MndtRltdInf", isoNamespace );
                await mandateRelatedInformation.WriteAsync(writer, populatedMandateRelatedInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CreditorSchemeIdentification Optional PartyIdentification135 PartyIdentification135
            if ( valueBeingSerialized.CreditorSchemeIdentification is PartyIdentification135 populatedCreditorSchemeIdentification)
            {
                await writer.WriteStartElementAsync(null, "CdtrSchmeId", isoNamespace );
                await creditorSchemeIdentification.WriteAsync(writer, populatedCreditorSchemeIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PreNotificationIdentification Optional Max35Text System.String
            if ( valueBeingSerialized.PreNotificationIdentification is System.String populatedPreNotificationIdentification)
            {
                await writer.WriteStartElementAsync(null, "PreNtfctnId", isoNamespace );
                await preNotificationIdentification.WriteAsync(writer, populatedPreNotificationIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PreNotificationDate Optional ISODate System.DateOnly
            if ( valueBeingSerialized.PreNotificationDate is System.DateOnly populatedPreNotificationDate)
            {
                await writer.WriteStartElementAsync(null, "PreNtfctnDt", isoNamespace );
                await preNotificationDate.WriteAsync(writer, populatedPreNotificationDate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
