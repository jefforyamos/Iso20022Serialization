//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for DirectDebitTransactionInformation28.  ISO2002 ID# _eD_pI9cZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="DirectDebitTransactionInformation28"/>.
    /// </summary>
    public class DirectDebitTransactionInformation28XmlAsyncWriter : ISubordinateXmlAsyncWriter<DirectDebitTransactionInformation28>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ISubordinateXmlAsyncWriter<PaymentIdentification6> paymentIdentification;
        private readonly ISubordinateXmlAsyncWriter<PaymentTypeInformation29> paymentTypeInformation;
        private readonly ActiveOrHistoricCurrencyAndAmountXmlAsyncWriter instructedAmount;
        private readonly IEnumXmlAsyncWriter<ChargeBearerType1Code> chargeBearer;
        private readonly ISubordinateXmlAsyncWriter<DirectDebitTransaction11> directDebitTransaction;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateCreditor;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> debtorAgent;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> debtorAgentAccount;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> debtor;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> debtorAccount;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateDebtor;
        private readonly Max140TextXmlAsyncWriter instructionForCreditorAgent;
        private readonly ISubordinateXmlAsyncWriter<Purpose2Choice_> purpose;
        private readonly ISubordinateXmlAsyncWriter<RegulatoryReporting3> regulatoryReporting;
        private readonly ISubordinateXmlAsyncWriter<TaxInformation10> tax;
        private readonly ISubordinateXmlAsyncWriter<RemittanceLocation7> relatedRemittanceInformation;
        private readonly ISubordinateXmlAsyncWriter<RemittanceInformation21> remittanceInformation;
        private readonly ISubordinateXmlAsyncWriter<SupplementaryData1> supplementaryData;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public DirectDebitTransactionInformation28XmlAsyncWriter
        (
            ISubordinateXmlAsyncWriter<PaymentIdentification6> paymentIdentification,
            ISubordinateXmlAsyncWriter<PaymentTypeInformation29> paymentTypeInformation,
            ActiveOrHistoricCurrencyAndAmountXmlAsyncWriter instructedAmount,
            IEnumXmlAsyncWriter<ChargeBearerType1Code> chargeBearer,
            ISubordinateXmlAsyncWriter<DirectDebitTransaction11> directDebitTransaction,
            ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateCreditor,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> debtorAgent,
            ISubordinateXmlAsyncWriter<CashAccount40> debtorAgentAccount,
            ISubordinateXmlAsyncWriter<PartyIdentification135> debtor,
            ISubordinateXmlAsyncWriter<CashAccount40> debtorAccount,
            ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateDebtor,
            Max140TextXmlAsyncWriter instructionForCreditorAgent,
            ISubordinateXmlAsyncWriter<Purpose2Choice_> purpose,
            ISubordinateXmlAsyncWriter<RegulatoryReporting3> regulatoryReporting,
            ISubordinateXmlAsyncWriter<TaxInformation10> tax,
            ISubordinateXmlAsyncWriter<RemittanceLocation7> relatedRemittanceInformation,
            ISubordinateXmlAsyncWriter<RemittanceInformation21> remittanceInformation,
            ISubordinateXmlAsyncWriter<SupplementaryData1> supplementaryData
        )
        {
            this.paymentIdentification = paymentIdentification;
            this.paymentTypeInformation = paymentTypeInformation;
            this.instructedAmount = instructedAmount;
            this.chargeBearer = chargeBearer;
            this.directDebitTransaction = directDebitTransaction;
            this.ultimateCreditor = ultimateCreditor;
            this.debtorAgent = debtorAgent;
            this.debtorAgentAccount = debtorAgentAccount;
            this.debtor = debtor;
            this.debtorAccount = debtorAccount;
            this.ultimateDebtor = ultimateDebtor;
            this.instructionForCreditorAgent = instructionForCreditorAgent;
            this.purpose = purpose;
            this.regulatoryReporting = regulatoryReporting;
            this.tax = tax;
            this.relatedRemittanceInformation = relatedRemittanceInformation;
            this.remittanceInformation = remittanceInformation;
            this.supplementaryData = supplementaryData;
        }
        public async Task WriteAsync(XmlWriter writer, DirectDebitTransactionInformation28 valueBeingSerialized, string isoNamespace)
        {
            // PaymentIdentification Required PaymentIdentification6 PaymentIdentification6
            await writer.WriteStartElementAsync(null, "PmtId", isoNamespace );
            await paymentIdentification.WriteAsync(writer, valueBeingSerialized.PaymentIdentification, isoNamespace);
            await writer.WriteEndElementAsync();
            // PaymentTypeInformation Optional PaymentTypeInformation29 PaymentTypeInformation29
            if ( valueBeingSerialized.PaymentTypeInformation is PaymentTypeInformation29 populatedPaymentTypeInformation)
            {
                await writer.WriteStartElementAsync(null, "PmtTpInf", isoNamespace );
                await paymentTypeInformation.WriteAsync(writer, populatedPaymentTypeInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructedAmount Required ActiveOrHistoricCurrencyAndAmount System.Decimal
            await writer.WriteStartElementAsync(null, "InstdAmt", isoNamespace );
            await instructedAmount.WriteAsync(writer, valueBeingSerialized.InstructedAmount, isoNamespace);
            await writer.WriteEndElementAsync();
            // ChargeBearer Optional ChargeBearerType1Code ChargeBearerType1Code
            if ( valueBeingSerialized.ChargeBearer is ChargeBearerType1Code populatedChargeBearer)
            {
                await writer.WriteStartElementAsync(null, "ChrgBr", isoNamespace );
                await chargeBearer.WriteAsync(writer, populatedChargeBearer, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DirectDebitTransaction Optional DirectDebitTransaction11 DirectDebitTransaction11
            if ( valueBeingSerialized.DirectDebitTransaction is DirectDebitTransaction11 populatedDirectDebitTransaction)
            {
                await writer.WriteStartElementAsync(null, "DrctDbtTx", isoNamespace );
                await directDebitTransaction.WriteAsync(writer, populatedDirectDebitTransaction, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // UltimateCreditor Optional PartyIdentification135 PartyIdentification135
            if ( valueBeingSerialized.UltimateCreditor is PartyIdentification135 populatedUltimateCreditor)
            {
                await writer.WriteStartElementAsync(null, "UltmtCdtr", isoNamespace );
                await ultimateCreditor.WriteAsync(writer, populatedUltimateCreditor, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DebtorAgent Required BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            await writer.WriteStartElementAsync(null, "DbtrAgt", isoNamespace );
            await debtorAgent.WriteAsync(writer, valueBeingSerialized.DebtorAgent, isoNamespace);
            await writer.WriteEndElementAsync();
            // DebtorAgentAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.DebtorAgentAccount is CashAccount40 populatedDebtorAgentAccount)
            {
                await writer.WriteStartElementAsync(null, "DbtrAgtAcct", isoNamespace );
                await debtorAgentAccount.WriteAsync(writer, populatedDebtorAgentAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Debtor Required PartyIdentification135 PartyIdentification135
            await writer.WriteStartElementAsync(null, "Dbtr", isoNamespace );
            await debtor.WriteAsync(writer, valueBeingSerialized.Debtor, isoNamespace);
            await writer.WriteEndElementAsync();
            // DebtorAccount Required CashAccount40 CashAccount40
            await writer.WriteStartElementAsync(null, "DbtrAcct", isoNamespace );
            await debtorAccount.WriteAsync(writer, valueBeingSerialized.DebtorAccount, isoNamespace);
            await writer.WriteEndElementAsync();
            // UltimateDebtor Optional PartyIdentification135 PartyIdentification135
            if ( valueBeingSerialized.UltimateDebtor is PartyIdentification135 populatedUltimateDebtor)
            {
                await writer.WriteStartElementAsync(null, "UltmtDbtr", isoNamespace );
                await ultimateDebtor.WriteAsync(writer, populatedUltimateDebtor, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructionForCreditorAgent Optional Max140Text System.String
            if ( valueBeingSerialized.InstructionForCreditorAgent is System.String populatedInstructionForCreditorAgent)
            {
                await writer.WriteStartElementAsync(null, "InstrForCdtrAgt", isoNamespace );
                await instructionForCreditorAgent.WriteAsync(writer, populatedInstructionForCreditorAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Purpose Optional Purpose2Choice Purpose2Choice_
            if ( valueBeingSerialized.Purpose is Purpose2Choice_ populatedPurpose)
            {
                await writer.WriteStartElementAsync(null, "Purp", isoNamespace );
                await purpose.WriteAsync(writer, populatedPurpose, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RegulatoryReporting Collection RegulatoryReporting3 RegulatoryReporting3
            foreach ( var item in valueBeingSerialized.RegulatoryReporting)
            {
                await writer.WriteStartElementAsync(null, "RgltryRptg", isoNamespace );
                await regulatoryReporting.WriteAsync(writer, item , isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Tax Optional TaxInformation10 TaxInformation10
            if ( valueBeingSerialized.Tax is TaxInformation10 populatedTax)
            {
                await writer.WriteStartElementAsync(null, "Tax", isoNamespace );
                await tax.WriteAsync(writer, populatedTax, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RelatedRemittanceInformation Collection RemittanceLocation7 RemittanceLocation7
            foreach ( var item in valueBeingSerialized.RelatedRemittanceInformation)
            {
                await writer.WriteStartElementAsync(null, "RltdRmtInf", isoNamespace );
                await relatedRemittanceInformation.WriteAsync(writer, item , isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RemittanceInformation Optional RemittanceInformation21 RemittanceInformation21
            if ( valueBeingSerialized.RemittanceInformation is RemittanceInformation21 populatedRemittanceInformation)
            {
                await writer.WriteStartElementAsync(null, "RmtInf", isoNamespace );
                await remittanceInformation.WriteAsync(writer, populatedRemittanceInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // SupplementaryData Optional SupplementaryData1 SupplementaryData1
            if ( valueBeingSerialized.SupplementaryData is SupplementaryData1 populatedSupplementaryData)
            {
                await writer.WriteStartElementAsync(null, "SplmtryData", isoNamespace );
                await supplementaryData.WriteAsync(writer, populatedSupplementaryData, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
