//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for DocumentLineIdentification1.  ISO2002 ID# _1QJJIabjEeKvUvwX_r3tzA.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="DocumentLineIdentification1"/>.
    /// </summary>
    public class DocumentLineIdentification1XmlAsyncWriter
    ( // primary constructor 
        ISubordinateXmlAsyncWriter<DocumentLineType1> type,
        IMax35TextXmlAsyncWriter number,
        IISODateXmlAsyncWriter relatedDate
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<DocumentLineIdentification1>
    {
        public async Task WriteAsync(XmlWriter writer, DocumentLineIdentification1 value, string isoNamespace)
        {
            // Type Optional DocumentLineType1 DocumentLineType1
            if ( value.Type is DocumentLineType1 populatedType)
            {
                await writer.WriteStartElementAsync(null, "Tp", isoNamespace );
                await type.WriteAsync(writer, populatedType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Number Optional Max35Text System.String
            if ( value.Number is System.String populatedNumber)
            {
                await writer.WriteStartElementAsync(null, "Nb", isoNamespace );
                await number.WriteAsync(writer, populatedNumber, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RelatedDate Optional ISODate System.DateOnly
            if ( value.RelatedDate is System.DateOnly populatedRelatedDate)
            {
                await writer.WriteStartElementAsync(null, "RltdDt", isoNamespace );
                await relatedDate.WriteAsync(writer, populatedRelatedDate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
