//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for DocumentLineType1.  ISO2002 ID# _cX4kMablEeKvUvwX_r3tzA.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="DocumentLineType1"/>.
    /// </summary>
    public class DocumentLineType1XmlAsyncWriter : ISubordinateXmlAsyncWriter<DocumentLineType1>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ISubordinateXmlAsyncWriter<DocumentLineType1Choice_> codeOrProprietary;
        private readonly IMax35TextXmlAsyncWriter issuer;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public DocumentLineType1XmlAsyncWriter
        (
            ISubordinateXmlAsyncWriter<DocumentLineType1Choice_> codeOrProprietary,
            IMax35TextXmlAsyncWriter issuer
        )
        {
            this.codeOrProprietary = codeOrProprietary;
            this.issuer = issuer;
        }
        public async Task WriteAsync(XmlWriter writer, DocumentLineType1 valueBeingSerialized, string isoNamespace)
        {
            // CodeOrProprietary Required DocumentLineType1Choice DocumentLineType1Choice_
            await writer.WriteStartElementAsync(null, "CdOrPrtry", isoNamespace );
            await codeOrProprietary.WriteAsync(writer, valueBeingSerialized.CodeOrProprietary, isoNamespace);
            await writer.WriteEndElementAsync();
            // Issuer Optional Max35Text System.String
            if ( valueBeingSerialized.Issuer is System.String populatedIssuer)
            {
                await writer.WriteStartElementAsync(null, "Issr", isoNamespace );
                await issuer.WriteAsync(writer, populatedIssuer, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
