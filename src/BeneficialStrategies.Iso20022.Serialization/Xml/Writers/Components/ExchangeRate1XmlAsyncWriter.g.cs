//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for ExchangeRate1.  ISO2002 ID# _t0booVkyEeGeoaLUQk__nA_667162887.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="ExchangeRate1"/>.
    /// </summary>
    public class ExchangeRate1XmlAsyncWriter
    ( // primary constructor 
        IActiveOrHistoricCurrencyCodeXmlAsyncWriter unitCurrency,
        IBaseOneRateXmlAsyncWriter exchangeRate,
        IEnumXmlAsyncWriter<ExchangeRateType1Code> rateType,
        IMax35TextXmlAsyncWriter contractIdentification
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<ExchangeRate1>
    {
        public async Task WriteAsync(XmlWriter writer, ExchangeRate1 value, string isoNamespace)
        {
            // UnitCurrency Optional ActiveOrHistoricCurrencyCode string
            if ( value.UnitCurrency is string populatedUnitCurrency)
            {
                await writer.WriteStartElementAsync(null, "UnitCcy", isoNamespace );
                await unitCurrency.WriteAsync(writer, populatedUnitCurrency, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ExchangeRate Optional BaseOneRate System.Decimal
            if ( value.ExchangeRate is System.Decimal populatedExchangeRate)
            {
                await writer.WriteStartElementAsync(null, "XchgRate", isoNamespace );
                await exchangeRate.WriteAsync(writer, populatedExchangeRate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RateType Optional ExchangeRateType1Code ExchangeRateType1Code
            if ( value.RateType is ExchangeRateType1Code populatedRateType)
            {
                await writer.WriteStartElementAsync(null, "RateTp", isoNamespace );
                await rateType.WriteAsync(writer, populatedRateType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ContractIdentification Optional Max35Text System.String
            if ( value.ContractIdentification is System.String populatedContractIdentification)
            {
                await writer.WriteStartElementAsync(null, "CtrctId", isoNamespace );
                await contractIdentification.WriteAsync(writer, populatedContractIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
