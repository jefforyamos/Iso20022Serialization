//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for FinancialInstitutionIdentification18.  ISO2002 ID# _8xXCNW49EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Amounts;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="FinancialInstitutionIdentification18"/>.
    /// </summary>
    public class FinancialInstitutionIdentification18XmlAsyncWriter : ISubordinateXmlAsyncWriter<FinancialInstitutionIdentification18>
    {
        // Injected dependencies for serialization of each member data type
        private readonly BICFIDec2014IdentifierXmlAsyncWriter bICFI;
        private readonly ISubordinateXmlAsyncWriter<ClearingSystemMemberIdentification2> clearingSystemMemberIdentification;
        private readonly LEIIdentifierXmlAsyncWriter lEI;
        private readonly Max140TextXmlAsyncWriter name;
        private readonly ISubordinateXmlAsyncWriter<PostalAddress24> postalAddress;
        private readonly ISubordinateXmlAsyncWriter<GenericFinancialIdentification1> other;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public FinancialInstitutionIdentification18XmlAsyncWriter
        (
            BICFIDec2014IdentifierXmlAsyncWriter bICFI,
            ISubordinateXmlAsyncWriter<ClearingSystemMemberIdentification2> clearingSystemMemberIdentification,
            LEIIdentifierXmlAsyncWriter lEI,
            Max140TextXmlAsyncWriter name,
            ISubordinateXmlAsyncWriter<PostalAddress24> postalAddress,
            ISubordinateXmlAsyncWriter<GenericFinancialIdentification1> other
        )
        {
            this.bICFI = bICFI;
            this.clearingSystemMemberIdentification = clearingSystemMemberIdentification;
            this.lEI = lEI;
            this.name = name;
            this.postalAddress = postalAddress;
            this.other = other;
        }
        public async Task WriteAsync(XmlWriter writer, FinancialInstitutionIdentification18 valueBeingSerialized, string isoNamespace)
        {
            // BICFI Optional BICFIDec2014Identifier System.String
            if ( valueBeingSerialized.BICFI is System.String populatedBICFI)
            {
                await writer.WriteStartElementAsync(null, "BICFI", isoNamespace );
                await bICFI.WriteAsync(writer, populatedBICFI, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ClearingSystemMemberIdentification Optional ClearingSystemMemberIdentification2 ClearingSystemMemberIdentification2
            if ( valueBeingSerialized.ClearingSystemMemberIdentification is ClearingSystemMemberIdentification2 populatedClearingSystemMemberIdentification)
            {
                await writer.WriteStartElementAsync(null, "ClrSysMmbId", isoNamespace );
                await clearingSystemMemberIdentification.WriteAsync(writer, populatedClearingSystemMemberIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // LEI Optional LEIIdentifier System.String
            if ( valueBeingSerialized.LEI is System.String populatedLEI)
            {
                await writer.WriteStartElementAsync(null, "LEI", isoNamespace );
                await lEI.WriteAsync(writer, populatedLEI, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Name Optional Max140Text System.String
            if ( valueBeingSerialized.Name is System.String populatedName)
            {
                await writer.WriteStartElementAsync(null, "Nm", isoNamespace );
                await name.WriteAsync(writer, populatedName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PostalAddress Optional PostalAddress24 PostalAddress24
            if ( valueBeingSerialized.PostalAddress is PostalAddress24 populatedPostalAddress)
            {
                await writer.WriteStartElementAsync(null, "PstlAdr", isoNamespace );
                await postalAddress.WriteAsync(writer, populatedPostalAddress, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Other Optional GenericFinancialIdentification1 GenericFinancialIdentification1
            if ( valueBeingSerialized.Other is GenericFinancialIdentification1 populatedOther)
            {
                await writer.WriteStartElementAsync(null, "Othr", isoNamespace );
                await other.WriteAsync(writer, populatedOther, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
