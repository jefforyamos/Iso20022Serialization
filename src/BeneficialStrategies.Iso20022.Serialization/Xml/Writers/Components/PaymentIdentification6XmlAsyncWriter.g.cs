//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for PaymentIdentification6.  ISO2002 ID# _xnoxwXrgEeidVZmeoasaWQ.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="PaymentIdentification6"/>.
    /// </summary>
    public class PaymentIdentification6XmlAsyncWriter
    ( // primary constructor 
        IMax35TextXmlAsyncWriter instructionIdentification,
        IMax35TextXmlAsyncWriter endToEndIdentification,
        IUUIDv4IdentifierXmlAsyncWriter uETR
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<PaymentIdentification6>
    {
        public async Task WriteAsync(XmlWriter writer, PaymentIdentification6 value, string isoNamespace)
        {
            // InstructionIdentification Optional Max35Text System.String
            if ( value.InstructionIdentification is System.String populatedInstructionIdentification)
            {
                await writer.WriteStartElementAsync(null, "InstrId", isoNamespace );
                await instructionIdentification.WriteAsync(writer, populatedInstructionIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // EndToEndIdentification Required Max35Text System.String
            await writer.WriteStartElementAsync(null, "EndToEndId", isoNamespace );
            await endToEndIdentification.WriteAsync(writer, value.EndToEndIdentification, isoNamespace);
            await writer.WriteEndElementAsync();
            // UETR Optional UUIDv4Identifier System.String
            if ( value.UETR is System.String populatedUETR)
            {
                await writer.WriteStartElementAsync(null, "UETR", isoNamespace );
                await uETR.WriteAsync(writer, populatedUETR, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
