//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for PaymentInstruction39.  ISO2002 ID# _eCraUdcZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="PaymentInstruction39"/>.
    /// </summary>
    public class PaymentInstruction39XmlAsyncWriter : ISubordinateXmlAsyncWriter<PaymentInstruction39>
    {
        // Injected dependencies for serialization of each member data type
        private readonly Max35TextXmlAsyncWriter paymentInformationIdentification;
        private readonly PaymentMethod2CodeXmlAsyncWriter paymentMethod;
        private readonly ISubordinateXmlAsyncWriter<AdviceType1> requestedAdviceType;
        private readonly BatchBookingIndicatorXmlAsyncWriter batchBooking;
        private readonly Max15NumericTextXmlAsyncWriter numberOfTransactions;
        private readonly DecimalNumberXmlAsyncWriter controlSum;
        private readonly ISubordinateXmlAsyncWriter<PaymentTypeInformation29> paymentTypeInformation;
        private readonly ISODateXmlAsyncWriter requestedCollectionDate;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> creditor;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> creditorAccount;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> creditorAgent;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> creditorAgentAccount;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateCreditor;
        private readonly ChargeBearerType1CodeXmlAsyncWriter chargeBearer;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> chargesAccount;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> chargesAccountAgent;
        private readonly ISubordinateXmlAsyncWriter<PartyIdentification135> creditorSchemeIdentification;
        private readonly ISubordinateXmlAsyncWriter<DirectDebitTransactionInformation28> directDebitTransactionInformation;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public PaymentInstruction39XmlAsyncWriter
        (
            Max35TextXmlAsyncWriter paymentInformationIdentification,
            PaymentMethod2CodeXmlAsyncWriter paymentMethod,
            ISubordinateXmlAsyncWriter<AdviceType1> requestedAdviceType,
            BatchBookingIndicatorXmlAsyncWriter batchBooking,
            Max15NumericTextXmlAsyncWriter numberOfTransactions,
            DecimalNumberXmlAsyncWriter controlSum,
            ISubordinateXmlAsyncWriter<PaymentTypeInformation29> paymentTypeInformation,
            ISODateXmlAsyncWriter requestedCollectionDate,
            ISubordinateXmlAsyncWriter<PartyIdentification135> creditor,
            ISubordinateXmlAsyncWriter<CashAccount40> creditorAccount,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> creditorAgent,
            ISubordinateXmlAsyncWriter<CashAccount40> creditorAgentAccount,
            ISubordinateXmlAsyncWriter<PartyIdentification135> ultimateCreditor,
            ChargeBearerType1CodeXmlAsyncWriter chargeBearer,
            ISubordinateXmlAsyncWriter<CashAccount40> chargesAccount,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> chargesAccountAgent,
            ISubordinateXmlAsyncWriter<PartyIdentification135> creditorSchemeIdentification,
            ISubordinateXmlAsyncWriter<DirectDebitTransactionInformation28> directDebitTransactionInformation
        )
        {
            this.paymentInformationIdentification = paymentInformationIdentification;
            this.paymentMethod = paymentMethod;
            this.requestedAdviceType = requestedAdviceType;
            this.batchBooking = batchBooking;
            this.numberOfTransactions = numberOfTransactions;
            this.controlSum = controlSum;
            this.paymentTypeInformation = paymentTypeInformation;
            this.requestedCollectionDate = requestedCollectionDate;
            this.creditor = creditor;
            this.creditorAccount = creditorAccount;
            this.creditorAgent = creditorAgent;
            this.creditorAgentAccount = creditorAgentAccount;
            this.ultimateCreditor = ultimateCreditor;
            this.chargeBearer = chargeBearer;
            this.chargesAccount = chargesAccount;
            this.chargesAccountAgent = chargesAccountAgent;
            this.creditorSchemeIdentification = creditorSchemeIdentification;
            this.directDebitTransactionInformation = directDebitTransactionInformation;
        }
        public async Task WriteAsync(XmlWriter writer, PaymentInstruction39 valueBeingSerialized, string isoNamespace)
        {
            // PaymentInformationIdentification Required Max35Text System.String
            await writer.WriteStartElementAsync(null, "PmtInfId", isoNamespace );
            await paymentInformationIdentification.WriteAsync(writer, valueBeingSerialized.PaymentInformationIdentification, isoNamespace);
            await writer.WriteEndElementAsync();
            // PaymentMethod Required PaymentMethod2Code PaymentMethod2Code
            await writer.WriteStartElementAsync(null, "PmtMtd", isoNamespace );
            await paymentMethod.WriteAsync(writer, valueBeingSerialized.PaymentMethod, isoNamespace);
            await writer.WriteEndElementAsync();
            // RequestedAdviceType Optional AdviceType1 AdviceType1
            if ( valueBeingSerialized.RequestedAdviceType is AdviceType1 populatedRequestedAdviceType)
            {
                await writer.WriteStartElementAsync(null, "ReqdAdvcTp", isoNamespace );
                await requestedAdviceType.WriteAsync(writer, populatedRequestedAdviceType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // BatchBooking Optional BatchBookingIndicator System.String
            if ( valueBeingSerialized.BatchBooking is System.String populatedBatchBooking)
            {
                await writer.WriteStartElementAsync(null, "BtchBookg", isoNamespace );
                await batchBooking.WriteAsync(writer, populatedBatchBooking, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // NumberOfTransactions Optional Max15NumericText System.String
            if ( valueBeingSerialized.NumberOfTransactions is System.String populatedNumberOfTransactions)
            {
                await writer.WriteStartElementAsync(null, "NbOfTxs", isoNamespace );
                await numberOfTransactions.WriteAsync(writer, populatedNumberOfTransactions, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ControlSum Optional DecimalNumber System.UInt64
            if ( valueBeingSerialized.ControlSum is System.UInt64 populatedControlSum)
            {
                await writer.WriteStartElementAsync(null, "CtrlSum", isoNamespace );
                await controlSum.WriteAsync(writer, populatedControlSum, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PaymentTypeInformation Optional PaymentTypeInformation29 PaymentTypeInformation29
            if ( valueBeingSerialized.PaymentTypeInformation is PaymentTypeInformation29 populatedPaymentTypeInformation)
            {
                await writer.WriteStartElementAsync(null, "PmtTpInf", isoNamespace );
                await paymentTypeInformation.WriteAsync(writer, populatedPaymentTypeInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RequestedCollectionDate Required ISODate System.DateOnly
            await writer.WriteStartElementAsync(null, "ReqdColltnDt", isoNamespace );
            await requestedCollectionDate.WriteAsync(writer, valueBeingSerialized.RequestedCollectionDate, isoNamespace);
            await writer.WriteEndElementAsync();
            // Creditor Required PartyIdentification135 PartyIdentification135
            await writer.WriteStartElementAsync(null, "Cdtr", isoNamespace );
            await creditor.WriteAsync(writer, valueBeingSerialized.Creditor, isoNamespace);
            await writer.WriteEndElementAsync();
            // CreditorAccount Required CashAccount40 CashAccount40
            await writer.WriteStartElementAsync(null, "CdtrAcct", isoNamespace );
            await creditorAccount.WriteAsync(writer, valueBeingSerialized.CreditorAccount, isoNamespace);
            await writer.WriteEndElementAsync();
            // CreditorAgent Required BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            await writer.WriteStartElementAsync(null, "CdtrAgt", isoNamespace );
            await creditorAgent.WriteAsync(writer, valueBeingSerialized.CreditorAgent, isoNamespace);
            await writer.WriteEndElementAsync();
            // CreditorAgentAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.CreditorAgentAccount is CashAccount40 populatedCreditorAgentAccount)
            {
                await writer.WriteStartElementAsync(null, "CdtrAgtAcct", isoNamespace );
                await creditorAgentAccount.WriteAsync(writer, populatedCreditorAgentAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // UltimateCreditor Optional PartyIdentification135 PartyIdentification135
            if ( valueBeingSerialized.UltimateCreditor is PartyIdentification135 populatedUltimateCreditor)
            {
                await writer.WriteStartElementAsync(null, "UltmtCdtr", isoNamespace );
                await ultimateCreditor.WriteAsync(writer, populatedUltimateCreditor, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChargeBearer Optional ChargeBearerType1Code ChargeBearerType1Code
            if ( valueBeingSerialized.ChargeBearer is ChargeBearerType1Code populatedChargeBearer)
            {
                await writer.WriteStartElementAsync(null, "ChrgBr", isoNamespace );
                await chargeBearer.WriteAsync(writer, populatedChargeBearer, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChargesAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.ChargesAccount is CashAccount40 populatedChargesAccount)
            {
                await writer.WriteStartElementAsync(null, "ChrgsAcct", isoNamespace );
                await chargesAccount.WriteAsync(writer, populatedChargesAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChargesAccountAgent Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( valueBeingSerialized.ChargesAccountAgent is BranchAndFinancialInstitutionIdentification6 populatedChargesAccountAgent)
            {
                await writer.WriteStartElementAsync(null, "ChrgsAcctAgt", isoNamespace );
                await chargesAccountAgent.WriteAsync(writer, populatedChargesAccountAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CreditorSchemeIdentification Optional PartyIdentification135 PartyIdentification135
            if ( valueBeingSerialized.CreditorSchemeIdentification is PartyIdentification135 populatedCreditorSchemeIdentification)
            {
                await writer.WriteStartElementAsync(null, "CdtrSchmeId", isoNamespace );
                await creditorSchemeIdentification.WriteAsync(writer, populatedCreditorSchemeIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DirectDebitTransactionInformation Unknown DirectDebitTransactionInformation28 DirectDebitTransactionInformation28
            // Because multiplicity is not known, implementation tolerates both optional and multiple
            IEnumerable<DirectDebitTransactionInformation28> listOfDirectDebitTransactionInformation = valueBeingSerialized.DirectDebitTransactionInformation switch
            {
                IEnumerable<DirectDebitTransactionInformation28> list => list,
                DirectDebitTransactionInformation28 singleDirectDebitTransactionInformation => [ singleDirectDebitTransactionInformation ],
                _ => []
            };
            
            foreach( var populatedDirectDebitTransactionInformation in listOfDirectDebitTransactionInformation )
            {
                await writer.WriteStartElementAsync(null, "DrctDbtTxInf", isoNamespace );
                await directDebitTransactionInformation.WriteAsync(writer, populatedDirectDebitTransactionInformation , isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
