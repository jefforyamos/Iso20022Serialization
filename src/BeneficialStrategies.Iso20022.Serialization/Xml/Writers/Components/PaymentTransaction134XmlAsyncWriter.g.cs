//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for PaymentTransaction134.  ISO2002 ID# _b3iYh9cZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="PaymentTransaction134"/>.
    /// </summary>
    public class PaymentTransaction134XmlAsyncWriter
    ( // primary constructor 
        IMax35TextXmlAsyncWriter reversalIdentification,
        IMax35TextXmlAsyncWriter originalInstructionIdentification,
        IMax35TextXmlAsyncWriter originalEndToEndIdentification,
        IUUIDv4IdentifierXmlAsyncWriter originalUETR,
        IActiveOrHistoricCurrencyAndAmountXmlAsyncWriter originalInstructedAmount,
        IActiveOrHistoricCurrencyAndAmountXmlAsyncWriter reversedInstructedAmount,
        IEnumXmlAsyncWriter<ChargeBearerType1Code> chargeBearer,
        ISubordinateXmlAsyncWriter<PaymentReversalReason9> reversalReasonInformation,
        ISubordinateXmlAsyncWriter<OriginalTransactionReference35> originalTransactionReference,
        ISubordinateXmlAsyncWriter<SupplementaryData1> supplementaryData
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<PaymentTransaction134>
    {
        public async Task WriteAsync(XmlWriter writer, PaymentTransaction134 value, string isoNamespace)
        {
            // ReversalIdentification Optional Max35Text System.String
            if ( value.ReversalIdentification is System.String populatedReversalIdentification)
            {
                await writer.WriteStartElementAsync(null, "RvslId", isoNamespace );
                await reversalIdentification.WriteAsync(writer, populatedReversalIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalInstructionIdentification Optional Max35Text System.String
            if ( value.OriginalInstructionIdentification is System.String populatedOriginalInstructionIdentification)
            {
                await writer.WriteStartElementAsync(null, "OrgnlInstrId", isoNamespace );
                await originalInstructionIdentification.WriteAsync(writer, populatedOriginalInstructionIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalEndToEndIdentification Optional Max35Text System.String
            if ( value.OriginalEndToEndIdentification is System.String populatedOriginalEndToEndIdentification)
            {
                await writer.WriteStartElementAsync(null, "OrgnlEndToEndId", isoNamespace );
                await originalEndToEndIdentification.WriteAsync(writer, populatedOriginalEndToEndIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalUETR Optional UUIDv4Identifier System.String
            if ( value.OriginalUETR is System.String populatedOriginalUETR)
            {
                await writer.WriteStartElementAsync(null, "OrgnlUETR", isoNamespace );
                await originalUETR.WriteAsync(writer, populatedOriginalUETR, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalInstructedAmount Optional ActiveOrHistoricCurrencyAndAmount System.Decimal
            if ( value.OriginalInstructedAmount is System.Decimal populatedOriginalInstructedAmount)
            {
                await writer.WriteStartElementAsync(null, "OrgnlInstdAmt", isoNamespace );
                await originalInstructedAmount.WriteAsync(writer, populatedOriginalInstructedAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ReversedInstructedAmount Optional ActiveOrHistoricCurrencyAndAmount System.Decimal
            if ( value.ReversedInstructedAmount is System.Decimal populatedReversedInstructedAmount)
            {
                await writer.WriteStartElementAsync(null, "RvsdInstdAmt", isoNamespace );
                await reversedInstructedAmount.WriteAsync(writer, populatedReversedInstructedAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChargeBearer Optional ChargeBearerType1Code ChargeBearerType1Code
            if ( value.ChargeBearer is ChargeBearerType1Code populatedChargeBearer)
            {
                await writer.WriteStartElementAsync(null, "ChrgBr", isoNamespace );
                await chargeBearer.WriteAsync(writer, populatedChargeBearer, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ReversalReasonInformation Optional PaymentReversalReason9 PaymentReversalReason9
            if ( value.ReversalReasonInformation is PaymentReversalReason9 populatedReversalReasonInformation)
            {
                await writer.WriteStartElementAsync(null, "RvslRsnInf", isoNamespace );
                await reversalReasonInformation.WriteAsync(writer, populatedReversalReasonInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalTransactionReference Optional OriginalTransactionReference35 OriginalTransactionReference35
            if ( value.OriginalTransactionReference is OriginalTransactionReference35 populatedOriginalTransactionReference)
            {
                await writer.WriteStartElementAsync(null, "OrgnlTxRef", isoNamespace );
                await originalTransactionReference.WriteAsync(writer, populatedOriginalTransactionReference, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // SupplementaryData Optional SupplementaryData1 SupplementaryData1
            if ( value.SupplementaryData is SupplementaryData1 populatedSupplementaryData)
            {
                await writer.WriteStartElementAsync(null, "SplmtryData", isoNamespace );
                await supplementaryData.WriteAsync(writer, populatedSupplementaryData, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
