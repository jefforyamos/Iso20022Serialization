//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for PaymentTransaction134.  ISO2002 ID# _b3iYh9cZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="PaymentTransaction134"/>.
    /// </summary>
    public class PaymentTransaction134XmlAsyncWriter : ISubordinateXmlAsyncWriter<PaymentTransaction134>
    {
        // Injected dependencies for serialization of each member data type
        private readonly IMax35TextXmlAsyncWriter reversalIdentification;
        private readonly IMax35TextXmlAsyncWriter originalInstructionIdentification;
        private readonly IMax35TextXmlAsyncWriter originalEndToEndIdentification;
        private readonly IUUIDv4IdentifierXmlAsyncWriter originalUETR;
        private readonly IActiveOrHistoricCurrencyAndAmountXmlAsyncWriter originalInstructedAmount;
        private readonly IActiveOrHistoricCurrencyAndAmountXmlAsyncWriter reversedInstructedAmount;
        private readonly IEnumXmlAsyncWriter<ChargeBearerType1Code> chargeBearer;
        private readonly ISubordinateXmlAsyncWriter<PaymentReversalReason9> reversalReasonInformation;
        private readonly ISubordinateXmlAsyncWriter<OriginalTransactionReference35> originalTransactionReference;
        private readonly ISubordinateXmlAsyncWriter<SupplementaryData1> supplementaryData;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public PaymentTransaction134XmlAsyncWriter
        (
            IMax35TextXmlAsyncWriter reversalIdentification,
            IMax35TextXmlAsyncWriter originalInstructionIdentification,
            IMax35TextXmlAsyncWriter originalEndToEndIdentification,
            IUUIDv4IdentifierXmlAsyncWriter originalUETR,
            IActiveOrHistoricCurrencyAndAmountXmlAsyncWriter originalInstructedAmount,
            IActiveOrHistoricCurrencyAndAmountXmlAsyncWriter reversedInstructedAmount,
            IEnumXmlAsyncWriter<ChargeBearerType1Code> chargeBearer,
            ISubordinateXmlAsyncWriter<PaymentReversalReason9> reversalReasonInformation,
            ISubordinateXmlAsyncWriter<OriginalTransactionReference35> originalTransactionReference,
            ISubordinateXmlAsyncWriter<SupplementaryData1> supplementaryData
        )
        {
            this.reversalIdentification = reversalIdentification;
            this.originalInstructionIdentification = originalInstructionIdentification;
            this.originalEndToEndIdentification = originalEndToEndIdentification;
            this.originalUETR = originalUETR;
            this.originalInstructedAmount = originalInstructedAmount;
            this.reversedInstructedAmount = reversedInstructedAmount;
            this.chargeBearer = chargeBearer;
            this.reversalReasonInformation = reversalReasonInformation;
            this.originalTransactionReference = originalTransactionReference;
            this.supplementaryData = supplementaryData;
        }
        public async Task WriteAsync(XmlWriter writer, PaymentTransaction134 valueBeingSerialized, string isoNamespace)
        {
            // ReversalIdentification Optional Max35Text System.String
            if ( valueBeingSerialized.ReversalIdentification is System.String populatedReversalIdentification)
            {
                await writer.WriteStartElementAsync(null, "RvslId", isoNamespace );
                await reversalIdentification.WriteAsync(writer, populatedReversalIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalInstructionIdentification Optional Max35Text System.String
            if ( valueBeingSerialized.OriginalInstructionIdentification is System.String populatedOriginalInstructionIdentification)
            {
                await writer.WriteStartElementAsync(null, "OrgnlInstrId", isoNamespace );
                await originalInstructionIdentification.WriteAsync(writer, populatedOriginalInstructionIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalEndToEndIdentification Optional Max35Text System.String
            if ( valueBeingSerialized.OriginalEndToEndIdentification is System.String populatedOriginalEndToEndIdentification)
            {
                await writer.WriteStartElementAsync(null, "OrgnlEndToEndId", isoNamespace );
                await originalEndToEndIdentification.WriteAsync(writer, populatedOriginalEndToEndIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalUETR Optional UUIDv4Identifier System.String
            if ( valueBeingSerialized.OriginalUETR is System.String populatedOriginalUETR)
            {
                await writer.WriteStartElementAsync(null, "OrgnlUETR", isoNamespace );
                await originalUETR.WriteAsync(writer, populatedOriginalUETR, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalInstructedAmount Optional ActiveOrHistoricCurrencyAndAmount System.Decimal
            if ( valueBeingSerialized.OriginalInstructedAmount is System.Decimal populatedOriginalInstructedAmount)
            {
                await writer.WriteStartElementAsync(null, "OrgnlInstdAmt", isoNamespace );
                await originalInstructedAmount.WriteAsync(writer, populatedOriginalInstructedAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ReversedInstructedAmount Optional ActiveOrHistoricCurrencyAndAmount System.Decimal
            if ( valueBeingSerialized.ReversedInstructedAmount is System.Decimal populatedReversedInstructedAmount)
            {
                await writer.WriteStartElementAsync(null, "RvsdInstdAmt", isoNamespace );
                await reversedInstructedAmount.WriteAsync(writer, populatedReversedInstructedAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ChargeBearer Optional ChargeBearerType1Code ChargeBearerType1Code
            if ( valueBeingSerialized.ChargeBearer is ChargeBearerType1Code populatedChargeBearer)
            {
                await writer.WriteStartElementAsync(null, "ChrgBr", isoNamespace );
                await chargeBearer.WriteAsync(writer, populatedChargeBearer, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ReversalReasonInformation Optional PaymentReversalReason9 PaymentReversalReason9
            if ( valueBeingSerialized.ReversalReasonInformation is PaymentReversalReason9 populatedReversalReasonInformation)
            {
                await writer.WriteStartElementAsync(null, "RvslRsnInf", isoNamespace );
                await reversalReasonInformation.WriteAsync(writer, populatedReversalReasonInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // OriginalTransactionReference Optional OriginalTransactionReference35 OriginalTransactionReference35
            if ( valueBeingSerialized.OriginalTransactionReference is OriginalTransactionReference35 populatedOriginalTransactionReference)
            {
                await writer.WriteStartElementAsync(null, "OrgnlTxRef", isoNamespace );
                await originalTransactionReference.WriteAsync(writer, populatedOriginalTransactionReference, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // SupplementaryData Optional SupplementaryData1 SupplementaryData1
            if ( valueBeingSerialized.SupplementaryData is SupplementaryData1 populatedSupplementaryData)
            {
                await writer.WriteStartElementAsync(null, "SplmtryData", isoNamespace );
                await supplementaryData.WriteAsync(writer, populatedSupplementaryData, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
