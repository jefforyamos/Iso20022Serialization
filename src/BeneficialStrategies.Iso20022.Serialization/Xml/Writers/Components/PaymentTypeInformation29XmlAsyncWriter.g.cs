//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for PaymentTypeInformation29.  ISO2002 ID# _gXVWIe10Eei2O5Op8j5zpA.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="PaymentTypeInformation29"/>.
    /// </summary>
    public class PaymentTypeInformation29XmlAsyncWriter
    ( // primary constructor 
        IEnumXmlAsyncWriter<Priority2Code> instructionPriority,
        ISubordinateXmlAsyncWriter<ServiceLevel8Choice_> serviceLevel,
        ISubordinateXmlAsyncWriter<LocalInstrument2Choice_> localInstrument,
        IEnumXmlAsyncWriter<SequenceType3Code> sequenceType,
        ISubordinateXmlAsyncWriter<CategoryPurpose1Choice_> categoryPurpose
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<PaymentTypeInformation29>
    {
        public async Task WriteAsync(XmlWriter writer, PaymentTypeInformation29 value, string isoNamespace)
        {
            // InstructionPriority Optional Priority2Code Priority2Code
            if ( value.InstructionPriority is Priority2Code populatedInstructionPriority)
            {
                await writer.WriteStartElementAsync(null, "InstrPrty", isoNamespace );
                await instructionPriority.WriteAsync(writer, populatedInstructionPriority, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ServiceLevel Optional ServiceLevel8Choice ServiceLevel8Choice_
            if ( value.ServiceLevel is ServiceLevel8Choice_ populatedServiceLevel)
            {
                await writer.WriteStartElementAsync(null, "SvcLvl", isoNamespace );
                await serviceLevel.WriteAsync(writer, populatedServiceLevel, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // LocalInstrument Optional LocalInstrument2Choice LocalInstrument2Choice_
            if ( value.LocalInstrument is LocalInstrument2Choice_ populatedLocalInstrument)
            {
                await writer.WriteStartElementAsync(null, "LclInstrm", isoNamespace );
                await localInstrument.WriteAsync(writer, populatedLocalInstrument, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // SequenceType Optional SequenceType3Code SequenceType3Code
            if ( value.SequenceType is SequenceType3Code populatedSequenceType)
            {
                await writer.WriteStartElementAsync(null, "SeqTp", isoNamespace );
                await sequenceType.WriteAsync(writer, populatedSequenceType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CategoryPurpose Optional CategoryPurpose1Choice CategoryPurpose1Choice_
            if ( value.CategoryPurpose is CategoryPurpose1Choice_ populatedCategoryPurpose)
            {
                await writer.WriteStartElementAsync(null, "CtgyPurp", isoNamespace );
                await categoryPurpose.WriteAsync(writer, populatedCategoryPurpose, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
