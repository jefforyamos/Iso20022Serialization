//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for PostalAddress24.  ISO2002 ID# _9XYD524-EeiU9cctagi5ow.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="PostalAddress24"/>.
    /// </summary>
    public class PostalAddress24XmlAsyncWriter : ISubordinateXmlAsyncWriter<PostalAddress24>
    {
        // Injected dependencies for serialization of each member data type
        private readonly ISubordinateXmlAsyncWriter<AddressType3Choice_> addressType;
        private readonly IMax70TextXmlAsyncWriter department;
        private readonly IMax70TextXmlAsyncWriter subDepartment;
        private readonly IMax70TextXmlAsyncWriter streetName;
        private readonly IMax16TextXmlAsyncWriter buildingNumber;
        private readonly IMax35TextXmlAsyncWriter buildingName;
        private readonly IMax70TextXmlAsyncWriter floor;
        private readonly IMax16TextXmlAsyncWriter postBox;
        private readonly IMax70TextXmlAsyncWriter room;
        private readonly IMax16TextXmlAsyncWriter postCode;
        private readonly IMax35TextXmlAsyncWriter townName;
        private readonly IMax35TextXmlAsyncWriter townLocationName;
        private readonly IMax35TextXmlAsyncWriter districtName;
        private readonly IMax35TextXmlAsyncWriter countrySubDivision;
        private readonly ICountryCodeXmlAsyncWriter country;
        private readonly IMax70TextXmlAsyncWriter addressLine;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public PostalAddress24XmlAsyncWriter
        (
            ISubordinateXmlAsyncWriter<AddressType3Choice_> addressType,
            IMax70TextXmlAsyncWriter department,
            IMax70TextXmlAsyncWriter subDepartment,
            IMax70TextXmlAsyncWriter streetName,
            IMax16TextXmlAsyncWriter buildingNumber,
            IMax35TextXmlAsyncWriter buildingName,
            IMax70TextXmlAsyncWriter floor,
            IMax16TextXmlAsyncWriter postBox,
            IMax70TextXmlAsyncWriter room,
            IMax16TextXmlAsyncWriter postCode,
            IMax35TextXmlAsyncWriter townName,
            IMax35TextXmlAsyncWriter townLocationName,
            IMax35TextXmlAsyncWriter districtName,
            IMax35TextXmlAsyncWriter countrySubDivision,
            ICountryCodeXmlAsyncWriter country,
            IMax70TextXmlAsyncWriter addressLine
        )
        {
            this.addressType = addressType;
            this.department = department;
            this.subDepartment = subDepartment;
            this.streetName = streetName;
            this.buildingNumber = buildingNumber;
            this.buildingName = buildingName;
            this.floor = floor;
            this.postBox = postBox;
            this.room = room;
            this.postCode = postCode;
            this.townName = townName;
            this.townLocationName = townLocationName;
            this.districtName = districtName;
            this.countrySubDivision = countrySubDivision;
            this.country = country;
            this.addressLine = addressLine;
        }
        public async Task WriteAsync(XmlWriter writer, PostalAddress24 value, string isoNamespace)
        {
            // AddressType Optional AddressType3Choice AddressType3Choice_
            if ( value.AddressType is AddressType3Choice_ populatedAddressType)
            {
                await writer.WriteStartElementAsync(null, "AdrTp", isoNamespace );
                await addressType.WriteAsync(writer, populatedAddressType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Department Optional Max70Text System.String
            if ( value.Department is System.String populatedDepartment)
            {
                await writer.WriteStartElementAsync(null, "Dept", isoNamespace );
                await department.WriteAsync(writer, populatedDepartment, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // SubDepartment Optional Max70Text System.String
            if ( value.SubDepartment is System.String populatedSubDepartment)
            {
                await writer.WriteStartElementAsync(null, "SubDept", isoNamespace );
                await subDepartment.WriteAsync(writer, populatedSubDepartment, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // StreetName Optional Max70Text System.String
            if ( value.StreetName is System.String populatedStreetName)
            {
                await writer.WriteStartElementAsync(null, "StrtNm", isoNamespace );
                await streetName.WriteAsync(writer, populatedStreetName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // BuildingNumber Optional Max16Text System.String
            if ( value.BuildingNumber is System.String populatedBuildingNumber)
            {
                await writer.WriteStartElementAsync(null, "BldgNb", isoNamespace );
                await buildingNumber.WriteAsync(writer, populatedBuildingNumber, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // BuildingName Optional Max35Text System.String
            if ( value.BuildingName is System.String populatedBuildingName)
            {
                await writer.WriteStartElementAsync(null, "BldgNm", isoNamespace );
                await buildingName.WriteAsync(writer, populatedBuildingName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Floor Optional Max70Text System.String
            if ( value.Floor is System.String populatedFloor)
            {
                await writer.WriteStartElementAsync(null, "Flr", isoNamespace );
                await floor.WriteAsync(writer, populatedFloor, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PostBox Optional Max16Text System.String
            if ( value.PostBox is System.String populatedPostBox)
            {
                await writer.WriteStartElementAsync(null, "PstBx", isoNamespace );
                await postBox.WriteAsync(writer, populatedPostBox, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Room Optional Max70Text System.String
            if ( value.Room is System.String populatedRoom)
            {
                await writer.WriteStartElementAsync(null, "Room", isoNamespace );
                await room.WriteAsync(writer, populatedRoom, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // PostCode Optional Max16Text System.String
            if ( value.PostCode is System.String populatedPostCode)
            {
                await writer.WriteStartElementAsync(null, "PstCd", isoNamespace );
                await postCode.WriteAsync(writer, populatedPostCode, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TownName Optional Max35Text System.String
            if ( value.TownName is System.String populatedTownName)
            {
                await writer.WriteStartElementAsync(null, "TwnNm", isoNamespace );
                await townName.WriteAsync(writer, populatedTownName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TownLocationName Optional Max35Text System.String
            if ( value.TownLocationName is System.String populatedTownLocationName)
            {
                await writer.WriteStartElementAsync(null, "TwnLctnNm", isoNamespace );
                await townLocationName.WriteAsync(writer, populatedTownLocationName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DistrictName Optional Max35Text System.String
            if ( value.DistrictName is System.String populatedDistrictName)
            {
                await writer.WriteStartElementAsync(null, "DstrctNm", isoNamespace );
                await districtName.WriteAsync(writer, populatedDistrictName, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CountrySubDivision Optional Max35Text System.String
            if ( value.CountrySubDivision is System.String populatedCountrySubDivision)
            {
                await writer.WriteStartElementAsync(null, "CtrySubDvsn", isoNamespace );
                await countrySubDivision.WriteAsync(writer, populatedCountrySubDivision, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Country Optional CountryCode string
            if ( value.Country is string populatedCountry)
            {
                await writer.WriteStartElementAsync(null, "Ctry", isoNamespace );
                await country.WriteAsync(writer, populatedCountry, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // AddressLine Collection Max70Text System.String
            foreach ( var item in value.AddressLine)
            {
                await writer.WriteStartElementAsync(null, "AdrLine", isoNamespace );
                await addressLine.WriteAsync(writer, item , isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
