//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for RegulatoryReporting3.  ISO2002 ID# _SnYP99p-Ed-ak6NoX_4Aeg_-1655670600.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="RegulatoryReporting3"/>.
    /// </summary>
    public class RegulatoryReporting3XmlAsyncWriter : ISubordinateXmlAsyncWriter<RegulatoryReporting3>
    {
        // Injected dependencies for serialization of each member data type
        private readonly IEnumXmlAsyncWriter<RegulatoryReportingType1Code> debitCreditReportingIndicator;
        private readonly ISubordinateXmlAsyncWriter<RegulatoryAuthority2> authority;
        private readonly ISubordinateXmlAsyncWriter<StructuredRegulatoryReporting3> details;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public RegulatoryReporting3XmlAsyncWriter
        (
            IEnumXmlAsyncWriter<RegulatoryReportingType1Code> debitCreditReportingIndicator,
            ISubordinateXmlAsyncWriter<RegulatoryAuthority2> authority,
            ISubordinateXmlAsyncWriter<StructuredRegulatoryReporting3> details
        )
        {
            this.debitCreditReportingIndicator = debitCreditReportingIndicator;
            this.authority = authority;
            this.details = details;
        }
        public async Task WriteAsync(XmlWriter writer, RegulatoryReporting3 valueBeingSerialized, string isoNamespace)
        {
            // DebitCreditReportingIndicator Optional RegulatoryReportingType1Code RegulatoryReportingType1Code
            if ( valueBeingSerialized.DebitCreditReportingIndicator is RegulatoryReportingType1Code populatedDebitCreditReportingIndicator)
            {
                await writer.WriteStartElementAsync(null, "DbtCdtRptgInd", isoNamespace );
                await debitCreditReportingIndicator.WriteAsync(writer, populatedDebitCreditReportingIndicator, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Authority Optional RegulatoryAuthority2 RegulatoryAuthority2
            if ( valueBeingSerialized.Authority is RegulatoryAuthority2 populatedAuthority)
            {
                await writer.WriteStartElementAsync(null, "Authrty", isoNamespace );
                await authority.WriteAsync(writer, populatedAuthority, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Details Optional StructuredRegulatoryReporting3 StructuredRegulatoryReporting3
            if ( valueBeingSerialized.Details is StructuredRegulatoryReporting3 populatedDetails)
            {
                await writer.WriteStartElementAsync(null, "Dtls", isoNamespace );
                await details.WriteAsync(writer, populatedDetails, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
