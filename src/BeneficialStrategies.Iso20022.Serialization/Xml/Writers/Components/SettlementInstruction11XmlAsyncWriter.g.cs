//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for SettlementInstruction11.  ISO2002 ID# _a1fsodcZEeqRFcf2R4bPBw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="SettlementInstruction11"/>.
    /// </summary>
    public class SettlementInstruction11XmlAsyncWriter : ISubordinateXmlAsyncWriter<SettlementInstruction11>
    {
        // Injected dependencies for serialization of each member data type
        private readonly SettlementMethod1CodeXmlAsyncWriter settlementMethod;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> settlementAccount;
        private readonly ISubordinateXmlAsyncWriter<ClearingSystemIdentification3Choice_> clearingSystem;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> instructingReimbursementAgent;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> instructingReimbursementAgentAccount;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> instructedReimbursementAgent;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> instructedReimbursementAgentAccount;
        private readonly ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> thirdReimbursementAgent;
        private readonly ISubordinateXmlAsyncWriter<CashAccount40> thirdReimbursementAgentAccount;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public SettlementInstruction11XmlAsyncWriter
        (
            SettlementMethod1CodeXmlAsyncWriter settlementMethod,
            ISubordinateXmlAsyncWriter<CashAccount40> settlementAccount,
            ISubordinateXmlAsyncWriter<ClearingSystemIdentification3Choice_> clearingSystem,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> instructingReimbursementAgent,
            ISubordinateXmlAsyncWriter<CashAccount40> instructingReimbursementAgentAccount,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> instructedReimbursementAgent,
            ISubordinateXmlAsyncWriter<CashAccount40> instructedReimbursementAgentAccount,
            ISubordinateXmlAsyncWriter<BranchAndFinancialInstitutionIdentification6> thirdReimbursementAgent,
            ISubordinateXmlAsyncWriter<CashAccount40> thirdReimbursementAgentAccount
        )
        {
            this.settlementMethod = settlementMethod;
            this.settlementAccount = settlementAccount;
            this.clearingSystem = clearingSystem;
            this.instructingReimbursementAgent = instructingReimbursementAgent;
            this.instructingReimbursementAgentAccount = instructingReimbursementAgentAccount;
            this.instructedReimbursementAgent = instructedReimbursementAgent;
            this.instructedReimbursementAgentAccount = instructedReimbursementAgentAccount;
            this.thirdReimbursementAgent = thirdReimbursementAgent;
            this.thirdReimbursementAgentAccount = thirdReimbursementAgentAccount;
        }
        public async Task WriteAsync(XmlWriter writer, SettlementInstruction11 valueBeingSerialized, string isoNamespace)
        {
            // SettlementMethod Required SettlementMethod1Code SettlementMethod1Code
            await writer.WriteStartElementAsync(null, "SttlmMtd", isoNamespace );
            await settlementMethod.WriteAsync(writer, valueBeingSerialized.SettlementMethod, isoNamespace);
            await writer.WriteEndElementAsync();
            // SettlementAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.SettlementAccount is CashAccount40 populatedSettlementAccount)
            {
                await writer.WriteStartElementAsync(null, "SttlmAcct", isoNamespace );
                await settlementAccount.WriteAsync(writer, populatedSettlementAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ClearingSystem Optional ClearingSystemIdentification3Choice ClearingSystemIdentification3Choice_
            if ( valueBeingSerialized.ClearingSystem is ClearingSystemIdentification3Choice_ populatedClearingSystem)
            {
                await writer.WriteStartElementAsync(null, "ClrSys", isoNamespace );
                await clearingSystem.WriteAsync(writer, populatedClearingSystem, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructingReimbursementAgent Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( valueBeingSerialized.InstructingReimbursementAgent is BranchAndFinancialInstitutionIdentification6 populatedInstructingReimbursementAgent)
            {
                await writer.WriteStartElementAsync(null, "InstgRmbrsmntAgt", isoNamespace );
                await instructingReimbursementAgent.WriteAsync(writer, populatedInstructingReimbursementAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructingReimbursementAgentAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.InstructingReimbursementAgentAccount is CashAccount40 populatedInstructingReimbursementAgentAccount)
            {
                await writer.WriteStartElementAsync(null, "InstgRmbrsmntAgtAcct", isoNamespace );
                await instructingReimbursementAgentAccount.WriteAsync(writer, populatedInstructingReimbursementAgentAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructedReimbursementAgent Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( valueBeingSerialized.InstructedReimbursementAgent is BranchAndFinancialInstitutionIdentification6 populatedInstructedReimbursementAgent)
            {
                await writer.WriteStartElementAsync(null, "InstdRmbrsmntAgt", isoNamespace );
                await instructedReimbursementAgent.WriteAsync(writer, populatedInstructedReimbursementAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // InstructedReimbursementAgentAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.InstructedReimbursementAgentAccount is CashAccount40 populatedInstructedReimbursementAgentAccount)
            {
                await writer.WriteStartElementAsync(null, "InstdRmbrsmntAgtAcct", isoNamespace );
                await instructedReimbursementAgentAccount.WriteAsync(writer, populatedInstructedReimbursementAgentAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ThirdReimbursementAgent Optional BranchAndFinancialInstitutionIdentification6 BranchAndFinancialInstitutionIdentification6
            if ( valueBeingSerialized.ThirdReimbursementAgent is BranchAndFinancialInstitutionIdentification6 populatedThirdReimbursementAgent)
            {
                await writer.WriteStartElementAsync(null, "ThrdRmbrsmntAgt", isoNamespace );
                await thirdReimbursementAgent.WriteAsync(writer, populatedThirdReimbursementAgent, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ThirdReimbursementAgentAccount Optional CashAccount40 CashAccount40
            if ( valueBeingSerialized.ThirdReimbursementAgentAccount is CashAccount40 populatedThirdReimbursementAgentAccount)
            {
                await writer.WriteStartElementAsync(null, "ThrdRmbrsmntAgtAcct", isoNamespace );
                await thirdReimbursementAgentAccount.WriteAsync(writer, populatedThirdReimbursementAgentAccount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
