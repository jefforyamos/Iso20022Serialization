//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for StructuredRemittanceInformation17.  ISO2002 ID# _n5V1sd4lEeqt1ZcLzWyWFw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="StructuredRemittanceInformation17"/>.
    /// </summary>
    public class StructuredRemittanceInformation17XmlAsyncWriter
    ( // primary constructor 
        ISubordinateXmlAsyncWriter<ReferredDocumentInformation7> referredDocumentInformation,
        ISubordinateXmlAsyncWriter<RemittanceAmount2> referredDocumentAmount,
        ISubordinateXmlAsyncWriter<CreditorReferenceInformation2> creditorReferenceInformation,
        ISubordinateXmlAsyncWriter<PartyIdentification135> invoicer,
        ISubordinateXmlAsyncWriter<PartyIdentification135> invoicee,
        ISubordinateXmlAsyncWriter<TaxData1> taxRemittance,
        ISubordinateXmlAsyncWriter<Garnishment3> garnishmentRemittance,
        IMax140TextXmlAsyncWriter additionalRemittanceInformation
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<StructuredRemittanceInformation17>
    {
        public async Task WriteAsync(XmlWriter writer, StructuredRemittanceInformation17 value, string isoNamespace)
        {
            // ReferredDocumentInformation Optional ReferredDocumentInformation7 ReferredDocumentInformation7
            if ( value.ReferredDocumentInformation is ReferredDocumentInformation7 populatedReferredDocumentInformation)
            {
                await writer.WriteStartElementAsync(null, "RfrdDocInf", isoNamespace );
                await referredDocumentInformation.WriteAsync(writer, populatedReferredDocumentInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // ReferredDocumentAmount Optional RemittanceAmount2 RemittanceAmount2
            if ( value.ReferredDocumentAmount is RemittanceAmount2 populatedReferredDocumentAmount)
            {
                await writer.WriteStartElementAsync(null, "RfrdDocAmt", isoNamespace );
                await referredDocumentAmount.WriteAsync(writer, populatedReferredDocumentAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CreditorReferenceInformation Optional CreditorReferenceInformation2 CreditorReferenceInformation2
            if ( value.CreditorReferenceInformation is CreditorReferenceInformation2 populatedCreditorReferenceInformation)
            {
                await writer.WriteStartElementAsync(null, "CdtrRefInf", isoNamespace );
                await creditorReferenceInformation.WriteAsync(writer, populatedCreditorReferenceInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Invoicer Optional PartyIdentification135 PartyIdentification135
            if ( value.Invoicer is PartyIdentification135 populatedInvoicer)
            {
                await writer.WriteStartElementAsync(null, "Invcr", isoNamespace );
                await invoicer.WriteAsync(writer, populatedInvoicer, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Invoicee Optional PartyIdentification135 PartyIdentification135
            if ( value.Invoicee is PartyIdentification135 populatedInvoicee)
            {
                await writer.WriteStartElementAsync(null, "Invcee", isoNamespace );
                await invoicee.WriteAsync(writer, populatedInvoicee, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TaxRemittance Optional TaxData1 TaxData1
            if ( value.TaxRemittance is TaxData1 populatedTaxRemittance)
            {
                await writer.WriteStartElementAsync(null, "TaxRmt", isoNamespace );
                await taxRemittance.WriteAsync(writer, populatedTaxRemittance, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // GarnishmentRemittance Optional Garnishment3 Garnishment3
            if ( value.GarnishmentRemittance is Garnishment3 populatedGarnishmentRemittance)
            {
                await writer.WriteStartElementAsync(null, "GrnshmtRmt", isoNamespace );
                await garnishmentRemittance.WriteAsync(writer, populatedGarnishmentRemittance, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // AdditionalRemittanceInformation Collection Max140Text System.String
            foreach ( var item in value.AdditionalRemittanceInformation)
            {
                await writer.WriteStartElementAsync(null, "AddtlRmtInf", isoNamespace );
                await additionalRemittanceInformation.WriteAsync(writer, item , isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
