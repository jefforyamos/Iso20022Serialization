//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for TaxAmount3.  ISO2002 ID# _n-65U94lEeqt1ZcLzWyWFw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="TaxAmount3"/>.
    /// </summary>
    public class TaxAmount3XmlAsyncWriter
    ( // primary constructor 
        IPercentageRateXmlAsyncWriter rate,
        IActiveOrHistoricCurrencyAndAmountXmlAsyncWriter taxableBaseAmount,
        IActiveOrHistoricCurrencyAndAmountXmlAsyncWriter totalAmount,
        ISubordinateXmlAsyncWriter<TaxRecordDetails3> details
    ) // end primary constructor
            : ISubordinateXmlAsyncWriter<TaxAmount3>
    {
        public async Task WriteAsync(XmlWriter writer, TaxAmount3 value, string isoNamespace)
        {
            // Rate Optional PercentageRate System.Decimal
            if ( value.Rate is System.Decimal populatedRate)
            {
                await writer.WriteStartElementAsync(null, "Rate", isoNamespace );
                await rate.WriteAsync(writer, populatedRate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TaxableBaseAmount Optional ActiveOrHistoricCurrencyAndAmount System.Decimal
            if ( value.TaxableBaseAmount is System.Decimal populatedTaxableBaseAmount)
            {
                await writer.WriteStartElementAsync(null, "TaxblBaseAmt", isoNamespace );
                await taxableBaseAmount.WriteAsync(writer, populatedTaxableBaseAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TotalAmount Optional ActiveOrHistoricCurrencyAndAmount System.Decimal
            if ( value.TotalAmount is System.Decimal populatedTotalAmount)
            {
                await writer.WriteStartElementAsync(null, "TtlAmt", isoNamespace );
                await totalAmount.WriteAsync(writer, populatedTotalAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Details Optional TaxRecordDetails3 TaxRecordDetails3
            if ( value.Details is TaxRecordDetails3 populatedDetails)
            {
                await writer.WriteStartElementAsync(null, "Dtls", isoNamespace );
                await details.WriteAsync(writer, populatedDetails, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
