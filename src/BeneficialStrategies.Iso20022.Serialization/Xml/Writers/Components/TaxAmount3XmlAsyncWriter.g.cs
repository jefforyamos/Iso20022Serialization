//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for TaxAmount3.  ISO2002 ID# _n-65U94lEeqt1ZcLzWyWFw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Amounts;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="TaxAmount3"/>.
    /// </summary>
    public class TaxAmount3XmlAsyncWriter : ISubordinateXmlAsyncWriter<TaxAmount3>
    {
        // Injected dependencies for serialization of each member data type
        private readonly PercentageRateXmlAsyncWriter rate;
        private readonly ISubordinateXmlAsyncWriter<ActiveOrHistoricCurrencyAndAmount> taxableBaseAmount;
        private readonly ISubordinateXmlAsyncWriter<ActiveOrHistoricCurrencyAndAmount> totalAmount;
        private readonly ISubordinateXmlAsyncWriter<TaxRecordDetails3> details;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public TaxAmount3XmlAsyncWriter
        (
            PercentageRateXmlAsyncWriter rate,
            ISubordinateXmlAsyncWriter<ActiveOrHistoricCurrencyAndAmount> taxableBaseAmount,
            ISubordinateXmlAsyncWriter<ActiveOrHistoricCurrencyAndAmount> totalAmount,
            ISubordinateXmlAsyncWriter<TaxRecordDetails3> details
        )
        {
            this.rate = rate;
            this.taxableBaseAmount = taxableBaseAmount;
            this.totalAmount = totalAmount;
            this.details = details;
        }
        public async Task WriteAsync(XmlWriter writer, TaxAmount3 valueBeingSerialized, string isoNamespace)
        {
            // Rate Optional PercentageRate System.Decimal
            if ( valueBeingSerialized.Rate is System.Decimal populatedRate)
            {
                await writer.WriteStartElementAsync(null, "Rate", isoNamespace );
                await rate.WriteAsync(writer, populatedRate, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TaxableBaseAmount Optional ActiveOrHistoricCurrencyAndAmount ActiveOrHistoricCurrencyAndAmount
            if ( valueBeingSerialized.TaxableBaseAmount is ActiveOrHistoricCurrencyAndAmount populatedTaxableBaseAmount)
            {
                await writer.WriteStartElementAsync(null, "TaxblBaseAmt", isoNamespace );
                await taxableBaseAmount.WriteAsync(writer, populatedTaxableBaseAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TotalAmount Optional ActiveOrHistoricCurrencyAndAmount ActiveOrHistoricCurrencyAndAmount
            if ( valueBeingSerialized.TotalAmount is ActiveOrHistoricCurrencyAndAmount populatedTotalAmount)
            {
                await writer.WriteStartElementAsync(null, "TtlAmt", isoNamespace );
                await totalAmount.WriteAsync(writer, populatedTotalAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Details Optional TaxRecordDetails3 TaxRecordDetails3
            if ( valueBeingSerialized.Details is TaxRecordDetails3 populatedDetails)
            {
                await writer.WriteStartElementAsync(null, "Dtls", isoNamespace );
                await details.WriteAsync(writer, populatedDetails, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
