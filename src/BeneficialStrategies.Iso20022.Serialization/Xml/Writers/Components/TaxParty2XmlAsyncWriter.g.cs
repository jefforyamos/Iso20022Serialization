//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for TaxParty2.  ISO2002 ID# _PdBMwdp-Ed-ak6NoX_4Aeg_920823246.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="TaxParty2"/>.
    /// </summary>
    public class TaxParty2XmlAsyncWriter : ISubordinateXmlAsyncWriter<TaxParty2>
    {
        // Injected dependencies for serialization of each member data type
        private readonly Max35TextXmlAsyncWriter taxIdentification;
        private readonly Max35TextXmlAsyncWriter registrationIdentification;
        private readonly Max35TextXmlAsyncWriter taxType;
        private readonly ISubordinateXmlAsyncWriter<TaxAuthorisation1> authorisation;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public TaxParty2XmlAsyncWriter
        (
            Max35TextXmlAsyncWriter taxIdentification,
            Max35TextXmlAsyncWriter registrationIdentification,
            Max35TextXmlAsyncWriter taxType,
            ISubordinateXmlAsyncWriter<TaxAuthorisation1> authorisation
        )
        {
            this.taxIdentification = taxIdentification;
            this.registrationIdentification = registrationIdentification;
            this.taxType = taxType;
            this.authorisation = authorisation;
        }
        public async Task WriteAsync(XmlWriter writer, TaxParty2 valueBeingSerialized, string isoNamespace)
        {
            // TaxIdentification Optional Max35Text System.String
            if ( valueBeingSerialized.TaxIdentification is System.String populatedTaxIdentification)
            {
                await writer.WriteStartElementAsync(null, "TaxId", isoNamespace );
                await taxIdentification.WriteAsync(writer, populatedTaxIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // RegistrationIdentification Optional Max35Text System.String
            if ( valueBeingSerialized.RegistrationIdentification is System.String populatedRegistrationIdentification)
            {
                await writer.WriteStartElementAsync(null, "RegnId", isoNamespace );
                await registrationIdentification.WriteAsync(writer, populatedRegistrationIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TaxType Optional Max35Text System.String
            if ( valueBeingSerialized.TaxType is System.String populatedTaxType)
            {
                await writer.WriteStartElementAsync(null, "TaxTp", isoNamespace );
                await taxType.WriteAsync(writer, populatedTaxType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Authorisation Optional TaxAuthorisation1 TaxAuthorisation1
            if ( valueBeingSerialized.Authorisation is TaxAuthorisation1 populatedAuthorisation)
            {
                await writer.WriteStartElementAsync(null, "Authstn", isoNamespace );
                await authorisation.WriteAsync(writer, populatedAuthorisation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
