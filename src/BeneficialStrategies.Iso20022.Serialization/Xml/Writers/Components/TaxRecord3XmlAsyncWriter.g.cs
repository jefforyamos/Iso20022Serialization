//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentSerializationGenerator for TaxRecord3.  ISO2002 ID# _n9ZPV94lEeqt1ZcLzWyWFw.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.Codesets;
using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.Serialization.Xml.Codesets;
using BeneficialStrategies.Iso20022.Serialization.Xml.Writers.SimpleTypes;
using System.Xml;

namespace BeneficialStrategies.Iso20022.Serialization.Xml.Writers.Components
{
    /// <summary>
    /// Performs the XML serialization faithful to ISO20002 standards for <seealso cref="TaxRecord3"/>.
    /// </summary>
    public class TaxRecord3XmlAsyncWriter : ISubordinateXmlAsyncWriter<TaxRecord3>
    {
        // Injected dependencies for serialization of each member data type
        private readonly Max35TextXmlAsyncWriter type;
        private readonly Max35TextXmlAsyncWriter category;
        private readonly Max35TextXmlAsyncWriter categoryDetails;
        private readonly Max35TextXmlAsyncWriter debtorStatus;
        private readonly Max35TextXmlAsyncWriter certificateIdentification;
        private readonly Max35TextXmlAsyncWriter formsCode;
        private readonly ISubordinateXmlAsyncWriter<TaxPeriod3> period;
        private readonly ISubordinateXmlAsyncWriter<TaxAmount3> taxAmount;
        private readonly Max140TextXmlAsyncWriter additionalInformation;
        
        /// <summary>
        /// Construct using an injected writer for each member.
        /// </summary>
        public TaxRecord3XmlAsyncWriter
        (
            Max35TextXmlAsyncWriter type,
            Max35TextXmlAsyncWriter category,
            Max35TextXmlAsyncWriter categoryDetails,
            Max35TextXmlAsyncWriter debtorStatus,
            Max35TextXmlAsyncWriter certificateIdentification,
            Max35TextXmlAsyncWriter formsCode,
            ISubordinateXmlAsyncWriter<TaxPeriod3> period,
            ISubordinateXmlAsyncWriter<TaxAmount3> taxAmount,
            Max140TextXmlAsyncWriter additionalInformation
        )
        {
            this.type = type;
            this.category = category;
            this.categoryDetails = categoryDetails;
            this.debtorStatus = debtorStatus;
            this.certificateIdentification = certificateIdentification;
            this.formsCode = formsCode;
            this.period = period;
            this.taxAmount = taxAmount;
            this.additionalInformation = additionalInformation;
        }
        public async Task WriteAsync(XmlWriter writer, TaxRecord3 valueBeingSerialized, string isoNamespace)
        {
            // Type Optional Max35Text System.String
            if ( valueBeingSerialized.Type is System.String populatedType)
            {
                await writer.WriteStartElementAsync(null, "Tp", isoNamespace );
                await type.WriteAsync(writer, populatedType, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Category Optional Max35Text System.String
            if ( valueBeingSerialized.Category is System.String populatedCategory)
            {
                await writer.WriteStartElementAsync(null, "Ctgy", isoNamespace );
                await category.WriteAsync(writer, populatedCategory, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CategoryDetails Optional Max35Text System.String
            if ( valueBeingSerialized.CategoryDetails is System.String populatedCategoryDetails)
            {
                await writer.WriteStartElementAsync(null, "CtgyDtls", isoNamespace );
                await categoryDetails.WriteAsync(writer, populatedCategoryDetails, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // DebtorStatus Optional Max35Text System.String
            if ( valueBeingSerialized.DebtorStatus is System.String populatedDebtorStatus)
            {
                await writer.WriteStartElementAsync(null, "DbtrSts", isoNamespace );
                await debtorStatus.WriteAsync(writer, populatedDebtorStatus, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // CertificateIdentification Optional Max35Text System.String
            if ( valueBeingSerialized.CertificateIdentification is System.String populatedCertificateIdentification)
            {
                await writer.WriteStartElementAsync(null, "CertId", isoNamespace );
                await certificateIdentification.WriteAsync(writer, populatedCertificateIdentification, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // FormsCode Optional Max35Text System.String
            if ( valueBeingSerialized.FormsCode is System.String populatedFormsCode)
            {
                await writer.WriteStartElementAsync(null, "FrmsCd", isoNamespace );
                await formsCode.WriteAsync(writer, populatedFormsCode, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // Period Optional TaxPeriod3 TaxPeriod3
            if ( valueBeingSerialized.Period is TaxPeriod3 populatedPeriod)
            {
                await writer.WriteStartElementAsync(null, "Prd", isoNamespace );
                await period.WriteAsync(writer, populatedPeriod, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // TaxAmount Optional TaxAmount3 TaxAmount3
            if ( valueBeingSerialized.TaxAmount is TaxAmount3 populatedTaxAmount)
            {
                await writer.WriteStartElementAsync(null, "TaxAmt", isoNamespace );
                await taxAmount.WriteAsync(writer, populatedTaxAmount, isoNamespace);
                await writer.WriteEndElementAsync();
            }
            // AdditionalInformation Optional Max140Text System.String
            if ( valueBeingSerialized.AdditionalInformation is System.String populatedAdditionalInformation)
            {
                await writer.WriteStartElementAsync(null, "AddtlInf", isoNamespace );
                await additionalInformation.WriteAsync(writer, populatedAdditionalInformation, isoNamespace);
                await writer.WriteEndElementAsync();
            }
        }
    }
}
